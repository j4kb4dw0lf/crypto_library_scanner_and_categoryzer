.TH "LSH512" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LSH512 \- LSH-512 hash function\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <lsh\&.h>\fP
.PP
Inherits \fBLSH512_Base\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (DIGESTSIZE=64)"
.br
.RI "Digest size, in bytes\&. "
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (BLOCKSIZE=LSH512_Base::BLOCKSIZE)"
.br
.RI "Block size, in bytes\&. "
.ti -1c
.RI "\fBLSH512\fP ()"
.br
.RI "Construct a LSH-512\&. "
.ti -1c
.RI "std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBLSH512_Base\fP
.in +1c
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (BLOCKSIZE=256)"
.br
.RI "Block size, in bytes\&. "
.ti -1c
.RI "unsigned int \fBBlockSize\fP () const"
.br
.RI "Provides the block size of the compression function\&. "
.ti -1c
.RI "unsigned int \fBDigestSize\fP () const"
.br
.ti -1c
.RI "unsigned int \fBOptimalDataAlignment\fP () const"
.br
.RI "Provides input and output data alignment for optimal performance\&. "
.ti -1c
.RI "void \fBRestart\fP ()"
.br
.RI "Restart the hash\&. "
.ti -1c
.RI "void \fBUpdate\fP (const \fBbyte\fP *input, size_t size)"
.br
.RI "Updates a hash with additional input\&. "
.ti -1c
.RI "void \fBTruncatedFinal\fP (\fBbyte\fP *hash, size_t size)"
.br
.RI "Computes the hash of the current message\&. "
.ti -1c
.RI "std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBHashTransformation\fP
.in +1c
.ti -1c
.RI "\fBHashTransformation\fP & \fBRef\fP ()"
.br
.RI "Provides a reference to this object\&. "
.ti -1c
.RI "virtual \fBbyte\fP * \fBCreateUpdateSpace\fP (size_t &size)"
.br
.RI "Request space which can be written into by the caller\&. "
.ti -1c
.RI "virtual void \fBFinal\fP (\fBbyte\fP *digest)"
.br
.RI "Computes the hash of the current message\&. "
.ti -1c
.RI "unsigned int \fBTagSize\fP () const"
.br
.ti -1c
.RI "virtual unsigned int \fBOptimalBlockSize\fP () const"
.br
.RI "Provides the input block size most efficient for this hash\&. "
.ti -1c
.RI "virtual void \fBCalculateDigest\fP (\fBbyte\fP *digest, const \fBbyte\fP *input, size_t length)"
.br
.RI "Updates the hash with additional input and computes the hash of the current message\&. "
.ti -1c
.RI "virtual bool \fBVerify\fP (const \fBbyte\fP *digest)"
.br
.RI "Verifies the hash of the current message\&. "
.ti -1c
.RI "virtual bool \fBVerifyDigest\fP (const \fBbyte\fP *digest, const \fBbyte\fP *input, size_t length)"
.br
.RI "Updates the hash with additional input and verifies the hash of the current message\&. "
.ti -1c
.RI "virtual void \fBCalculateTruncatedDigest\fP (\fBbyte\fP *digest, size_t digestSize, const \fBbyte\fP *input, size_t length)"
.br
.RI "Updates the hash with additional input and computes the hash of the current message\&. "
.ti -1c
.RI "virtual bool \fBTruncatedVerify\fP (const \fBbyte\fP *digest, size_t digestLength)"
.br
.RI "Verifies the hash of the current message\&. "
.ti -1c
.RI "virtual bool \fBVerifyTruncatedDigest\fP (const \fBbyte\fP *digest, size_t digestLength, const \fBbyte\fP *input, size_t length)"
.br
.RI "Updates the hash with additional input and verifies the hash of the current message\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static std::string \fBStaticAlgorithmName\fP ()"
.br
.RI "The algorithm's name\&. "
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBLSH512_Base\fP
.in +1c
.ti -1c
.RI "\fBLSH512_Base\fP (unsigned int algType, unsigned int digestSize)"
.br
.in -1c

Protected Member Functions inherited from \fBHashTransformation\fP
.in +1c
.ti -1c
.RI "void \fBThrowIfInvalidTruncatedSize\fP (size_t size) const"
.br
.RI "Validates a truncated digest size\&. "
.in -1c

Protected Attributes inherited from \fBLSH512_Base\fP
.in +1c
.ti -1c
.RI "\fBFixedSizeSecBlock\fP< word64, 80+2 > \fBm_state\fP"
.br
.ti -1c
.RI "\fBword32\fP \fBm_digestSize\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
LSH-512 hash function\&. 


.PP
\fBSee also\fP
.RS 4
\fRLSH\fP on the Korea Internet & Security Agency (KISA) website\&. 
.RE
.PP
\fBSince\fP
.RS 4
Crypto++ 8\&.6 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "LSH512::LSH512 ()\fR [inline]\fP"

.PP
Construct a LSH-512\&. LSH_TYPE_512 is the magic value 0x0010040 defined in lsh\&.cpp\&. 
.SH "Member Function Documentation"
.PP 
.SS "std::string LSH512::AlgorithmName () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Provides the name of this algorithm\&. 
.PP
\fBReturns\fP
.RS 4
the standard algorithm name
.RE
.PP
The standard algorithm name can be a name like \fRAES\fP or \fRAES/GCM\fP\&. Some algorithms do not have standard names yet\&. For example, there is no standard algorithm name for Shoup's \fBECIES\fP\&. 
.PP
\fBNote\fP
.RS 4
AlgorithmName is not universally implemented yet\&. 
.RE
.PP

.PP
Reimplemented from \fBAlgorithm\fP\&.
.SS "LSH512::CRYPTOPP_CONSTANT (BLOCKSIZE  = \fRLSH512_Base::BLOCKSIZE\fP)"

.PP
Block size, in bytes\&. LSH_512 uses LSH512_MSG_BLK_BYTE_LEN for block size, which is 256 
.SS "LSH512::CRYPTOPP_CONSTANT (DIGESTSIZE  = \fR64\fP)"

.PP
Digest size, in bytes\&. LSH_512 uses LSH_GET_HASHBYTE(algType) for digest size, which is 64 
.SS "std::string LSH512::StaticAlgorithmName ()\fR [inline]\fP, \fR [static]\fP"

.PP
The algorithm's name\&. 
.PP
\fBReturns\fP
.RS 4
the standard algorithm name
.RE
.PP
The standard algorithm name can be a name like \fRAES\fP or \fRAES/GCM\fP\&. Some algorithms do not have standard names yet\&. For example, there is no standard algorithm name for Shoup's \fBECIES\fP\&. 
.PP
\fBNote\fP
.RS 4
StaticAlgorithmName is not universally implemented yet\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
