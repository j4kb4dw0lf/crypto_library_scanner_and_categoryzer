.TH "LUCES< STANDARD >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LUCES< STANDARD > \- \fBLUC\fP encryption scheme\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <luc\&.h>\fP
.PP
Inherits \fBTF_ES< LUC, STANDARD >\fP\&.
.SS "Additional Inherited Members"


Public Types inherited from \fBTF_ES< LUC, STANDARD >\fP
.in +1c
.ti -1c
.RI "typedef STANDARD \fBStandard\fP"
.br
.RI "see \fBEncryptionStandard\fP for a list of standards "
.ti -1c
.RI "typedef \fBTF_CryptoSchemeOptions\fP< \fBTF_ES\fP< \fBLUC\fP, STANDARD, int >, \fBLUC\fP, MessageEncodingMethod > \fBSchemeOptions\fP"
.br
.ti -1c
.RI "typedef \fBPK_FinalTemplate\fP< \fBTF_DecryptorImpl\fP< \fBSchemeOptions\fP > > \fBDecryptor\fP"
.br
.RI "implements \fBPK_Decryptor\fP interface "
.ti -1c
.RI "typedef \fBPK_FinalTemplate\fP< \fBTF_EncryptorImpl\fP< \fBSchemeOptions\fP > > \fBEncryptor\fP"
.br
.RI "implements \fBPK_Encryptor\fP interface "
.in -1c

Public Types inherited from \fBLUC\fP
.in +1c
.ti -1c
.RI "typedef \fBLUCFunction\fP \fBPublicKey\fP"
.br
.ti -1c
.RI "typedef \fBInvertibleLUCFunction\fP \fBPrivateKey\fP"
.br
.in -1c

Static Public Member Functions inherited from \fBTF_ES< LUC, STANDARD >\fP
.in +1c
.ti -1c
.RI "static std::string CRYPTOPP_API \fBStaticAlgorithmName\fP ()"
.br
.in -1c

Static Public Member Functions inherited from \fBLUC\fP
.in +1c
.ti -1c
.RI "static std::string \fBStaticAlgorithmName\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class STANDARD>
.br
struct LUCES< STANDARD >"\fBLUC\fP encryption scheme\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fISTANDARD\fP signature standard
.RE
.PP
This class is here for historical and pedagogical interest\&. It has no practical advantages over other trapdoor functions and probably shouldn't be used in production software\&. The discrete log based \fBLUC\fP schemes defined later in this \&.h file may be of more practical interest\&. 
.PP
\fBSince\fP
.RS 4
Crypto++ 2\&.1 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
