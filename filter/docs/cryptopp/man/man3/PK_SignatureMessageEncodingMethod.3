.TH "PK_SignatureMessageEncodingMethod" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PK_SignatureMessageEncodingMethod \- Interface for message encoding method for public key signature schemes\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <pubkey\&.h>\fP
.PP
Inherited by \fBPK_DeterministicSignatureMessageEncodingMethod\fP, and \fBPK_RecoverableSignatureMessageEncodingMethod\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBHashIdentifierLookup\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual size_t \fBMinRepresentativeBitLength\fP (size_t hashIdentifierLength, size_t digestLength) const"
.br
.ti -1c
.RI "virtual size_t \fBMaxRecoverableLength\fP (size_t representativeBitLength, size_t hashIdentifierLength, size_t digestLength) const"
.br
.ti -1c
.RI "bool \fBIsProbabilistic\fP () const"
.br
.RI "Determines whether an encoding method requires a random number generator\&. "
.ti -1c
.RI "bool \fBAllowNonrecoverablePart\fP () const"
.br
.ti -1c
.RI "virtual bool \fBRecoverablePartFirst\fP () const"
.br
.ti -1c
.RI "virtual void \fBProcessSemisignature\fP (\fBHashTransformation\fP &hash, const \fBbyte\fP *semisignature, size_t semisignatureLength) const"
.br
.ti -1c
.RI "virtual void \fBProcessRecoverableMessage\fP (\fBHashTransformation\fP &hash, const \fBbyte\fP *recoverableMessage, size_t recoverableMessageLength, const \fBbyte\fP *presignature, size_t presignatureLength, \fBSecByteBlock\fP &semisignature) const"
.br
.ti -1c
.RI "virtual void \fBComputeMessageRepresentative\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *recoverableMessage, size_t recoverableMessageLength, \fBHashTransformation\fP &hash, HashIdentifier hashIdentifier, bool messageEmpty, \fBbyte\fP *representative, size_t representativeBitLength) const =0"
.br
.ti -1c
.RI "virtual bool \fBVerifyMessageRepresentative\fP (\fBHashTransformation\fP &hash, HashIdentifier hashIdentifier, bool messageEmpty, \fBbyte\fP *representative, size_t representativeBitLength) const =0"
.br
.ti -1c
.RI "virtual \fBDecodingResult\fP \fBRecoverMessageFromRepresentative\fP (\fBHashTransformation\fP &hash, HashIdentifier hashIdentifier, bool messageEmpty, \fBbyte\fP *representative, size_t representativeBitLength, \fBbyte\fP *recoveredMessage) const"
.br
.ti -1c
.RI "virtual \fBDecodingResult\fP \fBRecoverMessageFromSemisignature\fP (\fBHashTransformation\fP &hash, HashIdentifier hashIdentifier, const \fBbyte\fP *presignature, size_t presignatureLength, const \fBbyte\fP *semisignature, size_t semisignatureLength, \fBbyte\fP *recoveredMessage) const"
.br
.in -1c
.SH "Detailed Description"
.PP 
Interface for message encoding method for public key signature schemes\&. 

\fBPK_SignatureMessageEncodingMethod\fP provides interfaces for message encoding method for public key signature schemes\&. The methods support both trapdoor functions (\fRTF_*\fP) and discrete logarithm (\fRDL_*\fP) based schemes\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool PK_SignatureMessageEncodingMethod::IsProbabilistic () const\fR [inline]\fP"

.PP
Determines whether an encoding method requires a random number generator\&. 
.PP
\fBReturns\fP
.RS 4
true if the encoding method requires a \fBRandomNumberGenerator()\fP
.RE
.PP
if \fBIsProbabilistic()\fP returns false, then \fBNullRNG()\fP can be passed to functions that take \fBRandomNumberGenerator()\fP\&. 
.PP
\fBSee also\fP
.RS 4
Bellare and Rogaway\fRPSS: Provably Secure Encoding Method for Digital Signatures\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
