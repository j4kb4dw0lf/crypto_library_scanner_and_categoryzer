.TH "NIST_DRBG" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NIST_DRBG \- Interface for NIST DRBGs from SP 800-90A\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <drbg\&.h>\fP
.PP
Inherits \fBRandomNumberGenerator\fP\&.
.PP
Inherited by \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBErr\fP"
.br
.RI "\fBException\fP thrown when a NIST DRBG encounters an error\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBCanIncorporateEntropy\fP () const"
.br
.RI "Determines if a generator can accept additional entropy\&. "
.ti -1c
.RI "virtual void \fBIncorporateEntropy\fP (const \fBbyte\fP *input, size_t length)=0"
.br
.RI "Update RNG state with additional unpredictable values\&. "
.ti -1c
.RI "virtual void \fBIncorporateEntropy\fP (const \fBbyte\fP *entropy, size_t entropyLength, const \fBbyte\fP *additional, size_t additionaLength)=0"
.br
.RI "Update RNG state with additional unpredictable values\&. "
.ti -1c
.RI "virtual void \fBGenerateBlock\fP (\fBbyte\fP *output, size_t size)=0"
.br
.RI "Generate random array of bytes\&. "
.ti -1c
.RI "virtual void \fBGenerateBlock\fP (const \fBbyte\fP *additional, size_t additionaLength, \fBbyte\fP *output, size_t size)=0"
.br
.RI "Generate random array of bytes\&. "
.ti -1c
.RI "virtual unsigned int \fBSecurityStrength\fP () const =0"
.br
.RI "Provides the security strength\&. "
.ti -1c
.RI "virtual unsigned int \fBSeedLength\fP () const =0"
.br
.RI "Provides the seed length\&. "
.ti -1c
.RI "virtual unsigned int \fBMinEntropyLength\fP () const =0"
.br
.RI "Provides the minimum entropy size\&. "
.ti -1c
.RI "virtual unsigned int \fBMaxEntropyLength\fP () const =0"
.br
.RI "Provides the maximum entropy size\&. "
.ti -1c
.RI "virtual unsigned int \fBMinNonceLength\fP () const =0"
.br
.RI "Provides the minimum nonce size\&. "
.ti -1c
.RI "virtual unsigned int \fBMaxNonceLength\fP () const =0"
.br
.RI "Provides the maximum nonce size\&. "
.ti -1c
.RI "virtual unsigned int \fBMaxBytesPerRequest\fP () const =0"
.br
.RI "Provides the maximum size of a request to GenerateBlock\&. "
.ti -1c
.RI "virtual unsigned int \fBMaxRequestBeforeReseed\fP () const =0"
.br
.RI "Provides the maximum number of requests before a reseed\&. "
.in -1c

Public Member Functions inherited from \fBRandomNumberGenerator\fP
.in +1c
.ti -1c
.RI "virtual \fBbyte\fP \fBGenerateByte\fP ()"
.br
.RI "Generate new random byte and return it\&. "
.ti -1c
.RI "virtual unsigned int \fBGenerateBit\fP ()"
.br
.RI "Generate new random bit and return it\&. "
.ti -1c
.RI "virtual \fBword32\fP \fBGenerateWord32\fP (\fBword32\fP min=0, \fBword32\fP max=0xffffffffUL)"
.br
.RI "Generate a random 32 bit word in the range min to max, inclusive\&. "
.ti -1c
.RI "virtual void \fBGenerateIntoBufferedTransformation\fP (\fBBufferedTransformation\fP &target, const std::string &channel, \fBlword\fP length)"
.br
.RI "Generate random bytes into a \fBBufferedTransformation\fP\&. "
.ti -1c
.RI "virtual void \fBDiscardBytes\fP (size_t n)"
.br
.RI "Generate and discard n bytes\&. "
.ti -1c
.RI "template<class IT> void \fBShuffle\fP (IT begin, IT end)"
.br
.RI "Randomly shuffle the specified array\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBDRBG_Instantiate\fP (const \fBbyte\fP *entropy, size_t entropyLength, const \fBbyte\fP *nonce, size_t nonceLength, const \fBbyte\fP *personalization, size_t personalizationLength)=0"
.br
.ti -1c
.RI "virtual void \fBDRBG_Reseed\fP (const \fBbyte\fP *entropy, size_t entropyLength, const \fBbyte\fP *additional, size_t additionaLength)=0"
.br
.in -1c
.SH "Detailed Description"
.PP 
Interface for NIST DRBGs from SP 800-90A\&. 

\fBNIST_DRBG\fP is the base class interface for NIST DRBGs from SP 800-90A Rev 1 (June 2015)

.PP
You should reseed the generator after a fork() to avoid multiple generators with the same internal state\&. 
.PP
\fBSee also\fP
.RS 4
\fRRecommendation for Random Number Generation Using Deterministic Random Bit Generators, Rev 1 (June 2015)\fP 
.RE
.PP
\fBSince\fP
.RS 4
Crypto++ 6\&.0 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual bool NIST_DRBG::CanIncorporateEntropy () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determines if a generator can accept additional entropy\&. 
.PP
\fBReturns\fP
.RS 4
true
.RE
.PP
All \fBNIST_DRBG\fP return true 
.PP
Reimplemented from \fBRandomNumberGenerator\fP\&.
.SS "virtual void NIST_DRBG::GenerateBlock (\fBbyte\fP * output, size_t size)\fR [pure virtual]\fP"

.PP
Generate random array of bytes\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutput\fP the byte buffer 
.br
\fIsize\fP the length of the buffer, in bytes 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBNIST_DRBG::Err\fP\fP if a reseed is required 
.br
\fI\fBNIST_DRBG::Err\fP\fP if the size exceeds \fRMAXIMUM_BYTES_PER_REQUEST\fP 
.RE
.PP

.PP
Reimplemented from \fBRandomNumberGenerator\fP\&.
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual void NIST_DRBG::GenerateBlock (const \fBbyte\fP * additional, size_t additionaLength, \fBbyte\fP * output, size_t size)\fR [pure virtual]\fP"

.PP
Generate random array of bytes\&. 
.PP
\fBParameters\fP
.RS 4
\fIadditional\fP additional input to add to the generator 
.br
\fIadditionaLength\fP the size of the additional input buffer 
.br
\fIoutput\fP the byte buffer 
.br
\fIsize\fP the length of the buffer, in bytes 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBNIST_DRBG::Err\fP\fP if a reseed is required 
.br
\fI\fBNIST_DRBG::Err\fP\fP if the size exceeds \fRMAXIMUM_BYTES_PER_REQUEST\fP
.RE
.PP
\fBGenerateBlock()\fP is an overload provided to match NIST requirements\&. The byte array for \fRadditional\fP input is optional\&. If present the additional randomness is mixed before generating the output bytes\&. 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual void NIST_DRBG::IncorporateEntropy (const \fBbyte\fP * entropy, size_t entropyLength, const \fBbyte\fP * additional, size_t additionaLength)\fR [pure virtual]\fP"

.PP
Update RNG state with additional unpredictable values\&. 
.PP
\fBParameters\fP
.RS 4
\fIentropy\fP the entropy to add to the generator 
.br
\fIentropyLength\fP the size of the input buffer 
.br
\fIadditional\fP additional input to add to the generator 
.br
\fIadditionaLength\fP the size of the additional input buffer 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBNIST_DRBG::Err\fP\fP if the generator is reseeded with insufficient entropy
.RE
.PP
\fBIncorporateEntropy()\fP is an overload provided to match NIST requirements\&. NIST instantiation and reseed requirements demand the generator is constructed with at least \fRMINIMUM_ENTROPY\fP entropy\&. The byte array for \fRentropy\fP must meet \fRNIST SP 800-90B or SP 800-90C\fP requirements\&. 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual void NIST_DRBG::IncorporateEntropy (const \fBbyte\fP * input, size_t length)\fR [pure virtual]\fP"

.PP
Update RNG state with additional unpredictable values\&. 
.PP
\fBParameters\fP
.RS 4
\fIinput\fP the entropy to add to the generator 
.br
\fIlength\fP the size of the input buffer 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBNIST_DRBG::Err\fP\fP if the generator is reseeded with insufficient entropy
.RE
.PP
NIST instantiation and reseed requirements demand the generator is constructed with at least \fRMINIMUM_ENTROPY\fP entropy\&. The byte array for \fRinput\fP must meet \fRNIST SP 800-90B or SP 800-90C\fP requirements\&. 
.PP
Reimplemented from \fBRandomNumberGenerator\fP\&.
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual unsigned int NIST_DRBG::MaxBytesPerRequest () const\fR [pure virtual]\fP"

.PP
Provides the maximum size of a request to GenerateBlock\&. 
.PP
\fBReturns\fP
.RS 4
The maximum size of a request to \fBGenerateBlock()\fP, in bytes
.RE
.PP
The equivalent class constant is \fRMAXIMUM_BYTES_PER_REQUEST\fP 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual unsigned int NIST_DRBG::MaxEntropyLength () const\fR [pure virtual]\fP"

.PP
Provides the maximum entropy size\&. 
.PP
\fBReturns\fP
.RS 4
The maximum entropy size that can be consumed by the generator, in bytes
.RE
.PP
The equivalent class constant is \fRMAXIMUM_ENTROPY\fP\&. The bytes must meet \fRNIST SP 800-90B or SP 800-90C\fP requirements\&. \fRMAXIMUM_ENTROPY\fP has been reduced from 2\*{35\*}  to \fRINT_MAX\fP to fit the underlying C++ datatype\&. 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual unsigned int NIST_DRBG::MaxNonceLength () const\fR [pure virtual]\fP"

.PP
Provides the maximum nonce size\&. 
.PP
\fBReturns\fP
.RS 4
The maximum nonce that can be consumed by the generator, in bytes
.RE
.PP
The equivalent class constant is \fRMAXIMUM_NONCE\fP\&. \fRMAXIMUM_NONCE\fP has been reduced from 2\*{35\*}  to \fRINT_MAX\fP to fit the underlying C++ datatype\&. If a nonce is not required then \fRMINIMUM_NONCE\fP is 0\&. \fR\fBHash_DRBG\fP\fP does not require a nonce, while \fR\fBHMAC_DRBG\fP\fP and \fRCTR_DRBG\fP require a nonce\&. 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual unsigned int NIST_DRBG::MaxRequestBeforeReseed () const\fR [pure virtual]\fP"

.PP
Provides the maximum number of requests before a reseed\&. 
.PP
\fBReturns\fP
.RS 4
The maximum number of requests before a reseed, in bytes
.RE
.PP
The equivalent class constant is \fRMAXIMUM_REQUESTS_BEFORE_RESEED\fP\&. \fRMAXIMUM_REQUESTS_BEFORE_RESEED\fP has been reduced from 2\*{48\*}  to \fRINT_MAX\fP to fit the underlying C++ datatype\&. 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual unsigned int NIST_DRBG::MinEntropyLength () const\fR [pure virtual]\fP"

.PP
Provides the minimum entropy size\&. 
.PP
\fBReturns\fP
.RS 4
The minimum entropy size required by the generator, in bytes
.RE
.PP
The equivalent class constant is \fRMINIMUM_ENTROPY\fP\&. All NIST DRBGs must be instaniated with at least \fRMINIMUM_ENTROPY\fP bytes of entropy\&. The bytes must meet \fRNIST SP 800-90B or SP 800-90C\fP requirements\&. 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual unsigned int NIST_DRBG::MinNonceLength () const\fR [pure virtual]\fP"

.PP
Provides the minimum nonce size\&. 
.PP
\fBReturns\fP
.RS 4
The minimum nonce size recommended for the generator, in bytes
.RE
.PP
The equivalent class constant is \fRMINIMUM_NONCE\fP\&. If a nonce is not required then \fRMINIMUM_NONCE\fP is 0\&. \fR\fBHash_DRBG\fP\fP does not require a nonce, while \fR\fBHMAC_DRBG\fP\fP and \fRCTR_DRBG\fP require a nonce\&. 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual unsigned int NIST_DRBG::SecurityStrength () const\fR [pure virtual]\fP"

.PP
Provides the security strength\&. 
.PP
\fBReturns\fP
.RS 4
The security strength of the generator, in bytes
.RE
.PP
The equivalent class constant is \fRSECURITY_STRENGTH\fP 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.
.SS "virtual unsigned int NIST_DRBG::SeedLength () const\fR [pure virtual]\fP"

.PP
Provides the seed length\&. 
.PP
\fBReturns\fP
.RS 4
The seed size of the generator, in bytes
.RE
.PP
The equivalent class constant is \fRSEED_LENGTH\fP\&. The size is used to maintain internal state of \fRV\fP and \fRC\fP\&. 
.PP
Implemented in \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, and \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
