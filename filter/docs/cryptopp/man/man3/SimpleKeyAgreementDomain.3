.TH "SimpleKeyAgreementDomain" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SimpleKeyAgreementDomain \- Interface for domains of simple key agreement protocols\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <cryptlib\&.h>\fP
.PP
Inherits \fBKeyAgreementAlgorithm\fP\&.
.PP
Inherited by \fBDL_SimpleKeyAgreementDomainBase< typename GROUP_PARAMETERS::Element >\fP, \fBDL_SimpleKeyAgreementDomainBase< GROUP_PARAMETERS::Element >\fP, \fBDL_SimpleKeyAgreementDomainBase< T >\fP, \fBXTR_DH\fP, and \fBx25519\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual unsigned int \fBAgreedValueLength\fP () const =0"
.br
.RI "Provides the size of the agreed value\&. "
.ti -1c
.RI "virtual unsigned int \fBPrivateKeyLength\fP () const =0"
.br
.RI "Provides the size of the private key\&. "
.ti -1c
.RI "virtual unsigned int \fBPublicKeyLength\fP () const =0"
.br
.RI "Provides the size of the public key\&. "
.ti -1c
.RI "virtual void \fBGeneratePrivateKey\fP (\fBRandomNumberGenerator\fP &rng, \fBbyte\fP *privateKey) const =0"
.br
.RI "Generate private key in this domain\&. "
.ti -1c
.RI "virtual void \fBGeneratePublicKey\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *privateKey, \fBbyte\fP *publicKey) const =0"
.br
.RI "Generate a public key from a private key in this domain\&. "
.ti -1c
.RI "virtual void \fBGenerateKeyPair\fP (\fBRandomNumberGenerator\fP &rng, \fBbyte\fP *privateKey, \fBbyte\fP *publicKey) const"
.br
.RI "Generate a private/public key pair\&. "
.ti -1c
.RI "virtual bool \fBAgree\fP (\fBbyte\fP *agreedValue, const \fBbyte\fP *privateKey, const \fBbyte\fP *otherPublicKey, bool validateOtherPublicKey=true) const =0"
.br
.RI "Derive agreed value\&. "
.in -1c

Public Member Functions inherited from \fBKeyAgreementAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBCryptoMaterial\fP & \fBAccessMaterial\fP ()"
.br
.RI "Retrieves a reference to Crypto Parameters\&. "
.ti -1c
.RI "const \fBCryptoMaterial\fP & \fBGetMaterial\fP () const"
.br
.RI "Retrieves a reference to Crypto Parameters\&. "
.ti -1c
.RI "virtual \fBCryptoParameters\fP & \fBAccessCryptoParameters\fP ()=0"
.br
.RI "Retrieves a reference to Crypto Parameters\&. "
.ti -1c
.RI "virtual const \fBCryptoParameters\fP & \fBGetCryptoParameters\fP () const"
.br
.RI "Retrieves a reference to Crypto Parameters\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SH "Detailed Description"
.PP 
Interface for domains of simple key agreement protocols\&. 

A key agreement domain is a set of parameters that must be shared by two parties in a key agreement protocol, along with the algorithms for generating key pairs and deriving agreed values\&. 
.PP
\fBSince\fP
.RS 4
Crypto++ 3\&.0 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual bool SimpleKeyAgreementDomain::Agree (\fBbyte\fP * agreedValue, const \fBbyte\fP * privateKey, const \fBbyte\fP * otherPublicKey, bool validateOtherPublicKey = \fRtrue\fP) const\fR [pure virtual]\fP"

.PP
Derive agreed value\&. 
.PP
\fBParameters\fP
.RS 4
\fIagreedValue\fP a byte buffer for the shared secret 
.br
\fIprivateKey\fP a byte buffer with your private key in this domain 
.br
\fIotherPublicKey\fP a byte buffer with the other party's public key in this domain 
.br
\fIvalidateOtherPublicKey\fP a flag indicating if the other party's public key should be validated 
.RE
.PP
\fBReturns\fP
.RS 4
true upon success, false in case of failure
.RE
.PP
\fBAgree()\fP derives an agreed value from your private keys and couterparty's public keys\&.

.PP
The other party's public key is validated by default\&. If you have previously validated the static public key, use \fRvalidateStaticOtherPublicKey=false\fP to save time\&. 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(agreedValue) == \fBAgreedValueLength()\fP\fP 

.PP
\fRCOUNTOF(privateKey) == \fBPrivateKeyLength()\fP\fP 

.PP
\fRCOUNTOF(otherPublicKey) == \fBPublicKeyLength()\fP\fP 
.RE
.PP

.PP
Implemented in \fBDL_SimpleKeyAgreementDomainBase< T >\fP, \fBDL_SimpleKeyAgreementDomainBase< GROUP_PARAMETERS::Element >\fP, \fBDL_SimpleKeyAgreementDomainBase< typename GROUP_PARAMETERS::Element >\fP, \fBx25519\fP, and \fBXTR_DH\fP\&.
.SS "virtual unsigned int SimpleKeyAgreementDomain::AgreedValueLength () const\fR [pure virtual]\fP"

.PP
Provides the size of the agreed value\&. 
.PP
\fBReturns\fP
.RS 4
size of agreed value produced in this domain 
.RE
.PP

.PP
Implemented in \fBDL_SimpleKeyAgreementDomainBase< T >\fP, \fBDL_SimpleKeyAgreementDomainBase< GROUP_PARAMETERS::Element >\fP, \fBDL_SimpleKeyAgreementDomainBase< typename GROUP_PARAMETERS::Element >\fP, \fBx25519\fP, and \fBXTR_DH\fP\&.
.SS "void SimpleKeyAgreementDomain::GenerateKeyPair (\fBRandomNumberGenerator\fP & rng, \fBbyte\fP * privateKey, \fBbyte\fP * publicKey) const\fR [virtual]\fP"

.PP
Generate a private/public key pair\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIprivateKey\fP a byte buffer for the generated private key in this domain 
.br
\fIpublicKey\fP a byte buffer for the generated public key in this domain
.RE
.PP
\fBGenerateKeyPair()\fP is equivalent to calling \fBGeneratePrivateKey()\fP and then \fBGeneratePublicKey()\fP\&. 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(privateKey) == \fBPrivateKeyLength()\fP\fP 

.PP
\fRCOUNTOF(publicKey) == \fBPublicKeyLength()\fP\fP 
.RE
.PP

.SS "virtual void SimpleKeyAgreementDomain::GeneratePrivateKey (\fBRandomNumberGenerator\fP & rng, \fBbyte\fP * privateKey) const\fR [pure virtual]\fP"

.PP
Generate private key in this domain\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIprivateKey\fP a byte buffer for the generated private key in this domain 
.RE
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(privateKey) == \fBPrivateKeyLength()\fP\fP 
.RE
.PP

.PP
Implemented in \fBDL_SimpleKeyAgreementDomainBase< T >\fP, \fBDL_SimpleKeyAgreementDomainBase< GROUP_PARAMETERS::Element >\fP, \fBDL_SimpleKeyAgreementDomainBase< typename GROUP_PARAMETERS::Element >\fP, \fBx25519\fP, and \fBXTR_DH\fP\&.
.SS "virtual void SimpleKeyAgreementDomain::GeneratePublicKey (\fBRandomNumberGenerator\fP & rng, const \fBbyte\fP * privateKey, \fBbyte\fP * publicKey) const\fR [pure virtual]\fP"

.PP
Generate a public key from a private key in this domain\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIprivateKey\fP a byte buffer with the previously generated private key 
.br
\fIpublicKey\fP a byte buffer for the generated public key in this domain 
.RE
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(publicKey) == \fBPublicKeyLength()\fP\fP 
.RE
.PP

.PP
Implemented in \fBDH_Domain< GROUP_PARAMETERS, COFACTOR_OPTION >\fP, \fBDH_Domain< DL_GroupParameters_EC< EC >, COFACTOR_OPTION >\fP, \fBDH_Domain< DL_GroupParameters_GFP_DefaultSafePrime >\fP, \fBDH_Domain< DL_GroupParameters_LUC_DefaultSafePrime >\fP, \fBDH_Domain< GROUP_PARAMETERS, COFACTOR_OPTION >\fP, \fBDL_SimpleKeyAgreementDomainBase< T >\fP, \fBDL_SimpleKeyAgreementDomainBase< GROUP_PARAMETERS::Element >\fP, \fBDL_SimpleKeyAgreementDomainBase< typename GROUP_PARAMETERS::Element >\fP, \fBx25519\fP, and \fBXTR_DH\fP\&.
.SS "virtual unsigned int SimpleKeyAgreementDomain::PrivateKeyLength () const\fR [pure virtual]\fP"

.PP
Provides the size of the private key\&. 
.PP
\fBReturns\fP
.RS 4
size of private keys in this domain 
.RE
.PP

.PP
Implemented in \fBDL_SimpleKeyAgreementDomainBase< T >\fP, \fBDL_SimpleKeyAgreementDomainBase< GROUP_PARAMETERS::Element >\fP, \fBDL_SimpleKeyAgreementDomainBase< typename GROUP_PARAMETERS::Element >\fP, \fBx25519\fP, and \fBXTR_DH\fP\&.
.SS "virtual unsigned int SimpleKeyAgreementDomain::PublicKeyLength () const\fR [pure virtual]\fP"

.PP
Provides the size of the public key\&. 
.PP
\fBReturns\fP
.RS 4
size of public keys in this domain 
.RE
.PP

.PP
Implemented in \fBDL_SimpleKeyAgreementDomainBase< T >\fP, \fBDL_SimpleKeyAgreementDomainBase< GROUP_PARAMETERS::Element >\fP, \fBDL_SimpleKeyAgreementDomainBase< typename GROUP_PARAMETERS::Element >\fP, \fBx25519\fP, and \fBXTR_DH\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
