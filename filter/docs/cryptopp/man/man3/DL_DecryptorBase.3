.TH "DL_DecryptorBase< T >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DL_DecryptorBase< T > \- Discrete Log (DL) decryptor base implementation\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <pubkey\&.h>\fP
.PP
Inherits \fBDL_CryptoSystemBase< PK_Decryptor, DL_PrivateKey< T > >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBDL_CryptoSystemBase< PK_Decryptor, DL_PrivateKey< T > >\fP
.in +1c
.ti -1c
.RI "typedef \fBDL_Base\fP< \fBDL_PrivateKey\fP< T > >\fB::Element\fP \fBElement\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDecodingResult\fP \fBDecrypt\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *ciphertext, size_t ciphertextLength, \fBbyte\fP *plaintext, const \fBNameValuePairs\fP &parameters=g_nullNameValuePairs) const"
.br
.RI "Decrypt a byte string\&. "
.in -1c

Public Member Functions inherited from \fBDL_CryptoSystemBase< PK_Decryptor, DL_PrivateKey< T > >\fP
.in +1c
.ti -1c
.RI "size_t \fBMaxPlaintextLength\fP (size_t ciphertextLength) const"
.br
.ti -1c
.RI "size_t \fBCiphertextLength\fP (size_t plaintextLength) const"
.br
.ti -1c
.RI "bool \fBParameterSupported\fP (const char *name) const"
.br
.in -1c

Public Member Functions inherited from \fBPK_Decryptor\fP
.in +1c
.ti -1c
.RI "virtual \fBBufferedTransformation\fP * \fBCreateDecryptionFilter\fP (\fBRandomNumberGenerator\fP &rng, \fBBufferedTransformation\fP *attachment=NULLPTR, const \fBNameValuePairs\fP &parameters=g_nullNameValuePairs) const"
.br
.RI "Create a new decryption filter\&. "
.ti -1c
.RI "\fBDecodingResult\fP \fBFixedLengthDecrypt\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *ciphertext, \fBbyte\fP *plaintext, const \fBNameValuePairs\fP &parameters=g_nullNameValuePairs) const"
.br
.RI "Decrypt a fixed size ciphertext\&. "
.in -1c

Public Member Functions inherited from \fBPK_CryptoSystem\fP
.in +1c
.ti -1c
.RI "virtual size_t \fBFixedCiphertextLength\fP () const"
.br
.RI "Provides the fixed ciphertext length, if one exists\&. "
.ti -1c
.RI "virtual size_t \fBFixedMaxPlaintextLength\fP () const"
.br
.RI "Provides the maximum plaintext length given a fixed ciphertext length\&. "
.in -1c

Public Member Functions inherited from \fBPrivateKeyAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBCryptoMaterial\fP & \fBAccessMaterial\fP ()"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "const \fBCryptoMaterial\fP & \fBGetMaterial\fP () const"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "virtual \fBPrivateKey\fP & \fBAccessPrivateKey\fP ()=0"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "virtual const \fBPrivateKey\fP & \fBGetPrivateKey\fP () const"
.br
.RI "Retrieves a reference to a Private Key\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SS "Additional Inherited Members"


Protected Types inherited from \fBDL_Base< DL_PrivateKey< T > >\fP
.in +1c
.ti -1c
.RI "typedef \fBDL_PrivateKey\fP< T > \fBKeyInterface\fP"
.br
.ti -1c
.RI "typedef \fBDL_PrivateKey\fP< T >\fB::Element\fP \fBElement\fP"
.br
.in -1c

Protected Member Functions inherited from \fBDL_CryptoSystemBase< PK_Decryptor, DL_PrivateKey< T > >\fP
.in +1c
.ti -1c
.RI "virtual const \fBDL_KeyAgreementAlgorithm\fP< Element > & \fBGetKeyAgreementAlgorithm\fP () const=0"
.br
.ti -1c
.RI "virtual const \fBDL_KeyDerivationAlgorithm\fP< Element > & \fBGetKeyDerivationAlgorithm\fP () const=0"
.br
.ti -1c
.RI "virtual const \fBDL_SymmetricEncryptionAlgorithm\fP & \fBGetSymmetricEncryptionAlgorithm\fP () const=0"
.br
.in -1c

Protected Member Functions inherited from \fBDL_Base< DL_PrivateKey< T > >\fP
.in +1c
.ti -1c
.RI "const \fBDL_GroupParameters\fP< Element > & \fBGetAbstractGroupParameters\fP () const"
.br
.ti -1c
.RI "\fBDL_GroupParameters\fP< Element > & \fBAccessAbstractGroupParameters\fP ()"
.br
.ti -1c
.RI "virtual \fBKeyInterface\fP & \fBAccessKeyInterface\fP ()=0"
.br
.ti -1c
.RI "virtual const \fBKeyInterface\fP & \fBGetKeyInterface\fP () const=0"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T>
.br
class DL_DecryptorBase< T >"Discrete Log (DL) decryptor base implementation\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Field element type or class
.RE
.PP
Field element \fRT\fP can be \fBInteger\fP, \fBECP\fP or \fBEC2N\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<class T> \fBDecodingResult\fP \fBDL_DecryptorBase\fP< T >::Decrypt (\fBRandomNumberGenerator\fP & rng, const \fBbyte\fP * ciphertext, size_t ciphertextLength, \fBbyte\fP * plaintext, const \fBNameValuePairs\fP & parameters = \fRg_nullNameValuePairs\fP) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Decrypt a byte string\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIciphertext\fP the encrypted byte buffer 
.br
\fIciphertextLength\fP the size of the encrypted byte buffer 
.br
\fIplaintext\fP a byte buffer to hold the decrypted string 
.br
\fIparameters\fP a set of \fBNameValuePairs\fP to initialize this object 
.RE
.PP
\fBReturns\fP
.RS 4
the result of the decryption operation
.RE
.PP
If \fBDecodingResult::isValidCoding\fP is true, then \fBDecodingResult::messageLength\fP is valid and holds the actual length of the plaintext recovered\&. The result is undefined if decryption failed\&. If \fBDecodingResult::isValidCoding\fP is false, then \fBDecodingResult::messageLength\fP is undefined\&. 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(plaintext) == MaxPlaintextLength(ciphertextLength)\fP ensures the output byte buffer is large enough 
.RE
.PP
\fBSee also\fP
.RS 4
\fBPK_Encryptor\fP 
.RE
.PP

.PP
Implements \fBPK_Decryptor\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
