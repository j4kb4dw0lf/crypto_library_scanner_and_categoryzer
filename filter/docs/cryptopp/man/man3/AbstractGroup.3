.TH "AbstractGroup< T >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AbstractGroup< T > \- Abstract group\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <algebra\&.h>\fP
.PP
Inherited by \fBAbstractRing< T::Element >\fP, and \fBAbstractRing< T >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBEqual\fP (const Element &a, const Element &b) const =0"
.br
.RI "Compare two elements for equality\&. "
.ti -1c
.RI "virtual const Element & \fBIdentity\fP () const =0"
.br
.RI "Provides the Identity element\&. "
.ti -1c
.RI "virtual const Element & \fBAdd\fP (const Element &a, const Element &b) const =0"
.br
.RI "Adds elements in the group\&. "
.ti -1c
.RI "virtual const Element & \fBInverse\fP (const Element &a) const =0"
.br
.RI "Inverts the element in the group\&. "
.ti -1c
.RI "virtual bool \fBInversionIsFast\fP () const"
.br
.RI "Determine if inversion is fast\&. "
.ti -1c
.RI "virtual const Element & \fBDouble\fP (const Element &a) const"
.br
.RI "Doubles an element in the group\&. "
.ti -1c
.RI "virtual const Element & \fBSubtract\fP (const Element &a, const Element &b) const"
.br
.RI "Subtracts elements in the group\&. "
.ti -1c
.RI "virtual Element & \fBAccumulate\fP (Element &a, const Element &b) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual Element & \fBReduce\fP (Element &a, const Element &b) const"
.br
.RI "Reduces an element in the congruence class\&. "
.ti -1c
.RI "virtual Element \fBScalarMultiply\fP (const Element &a, const \fBInteger\fP &e) const"
.br
.RI "Performs a scalar multiplication\&. "
.ti -1c
.RI "virtual Element \fBCascadeScalarMultiply\fP (const Element &x, const \fBInteger\fP &e1, const Element &y, const \fBInteger\fP &e2) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual void \fBSimultaneousMultiply\fP (Element *results, const Element &base, const \fBInteger\fP *exponents, unsigned int exponentsCount) const"
.br
.RI "Multiplies a base to multiple exponents in a group\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T>
.br
class AbstractGroup< T >"Abstract group\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP element class or type
.RE
.PP
\fRconst Element&\fP returned by member functions are references to internal data members\&. Since each object may have only one such data member for holding results, the following code will produce incorrect results: 
.PP
.nf
    abcd = group\&.Add(group\&.Add(a,b), group\&.Add(c,d));
.fi
.PP
 But this should be fine: 
.PP
.nf
    abcd = group\&.Add(a, group\&.Add(b, group\&.Add(c,d));
.fi
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "template<class T> T & \fBAbstractGroup\fP< T >::Accumulate (Element & a, const Element & b) const\fR [virtual]\fP"

.PP
TODO\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
TODO 
.RE
.PP

.PP
Reimplemented in \fBEuclideanDomainOf< T >\fP, \fBEuclideanDomainOf< PolynomialMod2 >\fP, and \fBGFP2_ONB< F >\fP\&.
.SS "template<class T> virtual const Element & \fBAbstractGroup\fP< T >::Add (const Element & a, const Element & b) const\fR [pure virtual]\fP"

.PP
Adds elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
the sum of \fRa\fP and \fRb\fP 
.RE
.PP

.PP
Implemented in \fBEC2N\fP, \fBECP\fP, \fBEuclideanDomainOf< T >\fP, \fBEuclideanDomainOf< PolynomialMod2 >\fP, \fBGFP2_ONB< F >\fP, and \fBModularArithmetic\fP\&.
.SS "template<class T> T \fBAbstractGroup\fP< T >::CascadeScalarMultiply (const Element & x, const \fBInteger\fP & e1, const Element & y, const \fBInteger\fP & e2) const\fR [virtual]\fP"

.PP
TODO\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP first multiplicand 
.br
\fIe1\fP the first multiplier 
.br
\fIy\fP second multiplicand 
.br
\fIe2\fP the second multiplier 
.RE
.PP
\fBReturns\fP
.RS 4
TODO 
.RE
.PP

.SS "template<class T> const T & \fBAbstractGroup\fP< T >::Double (const Element & a) const\fR [virtual]\fP"

.PP
Doubles an element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP
\fBReturns\fP
.RS 4
the element doubled 
.RE
.PP

.PP
Reimplemented in \fBEuclideanDomainOf< T >\fP, \fBEuclideanDomainOf< PolynomialMod2 >\fP, \fBGFP2_ONB< F >\fP, and \fBModularArithmetic\fP\&.
.SS "template<class T> virtual bool \fBAbstractGroup\fP< T >::Equal (const Element & a, const Element & b) const\fR [pure virtual]\fP"

.PP
Compare two elements for equality\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
true if the elements are equal, false otherwise
.RE
.PP
\fBEqual()\fP tests the elements for equality using \fRa==b\fP 
.PP
Implemented in \fBEC2N\fP, \fBECP\fP, \fBEuclideanDomainOf< T >\fP, \fBEuclideanDomainOf< PolynomialMod2 >\fP, \fBGFP2_ONB< F >\fP, and \fBModularArithmetic\fP\&.
.SS "template<class T> virtual const Element & \fBAbstractGroup\fP< T >::Identity () const\fR [pure virtual]\fP"

.PP
Provides the Identity element\&. 
.PP
\fBReturns\fP
.RS 4
the Identity element 
.RE
.PP

.PP
Implemented in \fBEC2N\fP, \fBECP\fP, \fBEuclideanDomainOf< T >\fP, \fBEuclideanDomainOf< PolynomialMod2 >\fP, \fBGFP2_ONB< F >\fP, \fBModularArithmetic\fP, \fBQuotientRing< T >\fP, \fBQuotientRing< EuclideanDomainOf< PolynomialMod2 > >\fP, and \fBRingOfPolynomialsOver< T >\fP\&.
.SS "template<class T> virtual const Element & \fBAbstractGroup\fP< T >::Inverse (const Element & a) const\fR [pure virtual]\fP"

.PP
Inverts the element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.RE
.PP
\fBReturns\fP
.RS 4
the inverse of the element 
.RE
.PP

.PP
Implemented in \fBEC2N\fP, \fBECP\fP, \fBEuclideanDomainOf< T >\fP, \fBEuclideanDomainOf< PolynomialMod2 >\fP, \fBGFP2_ONB< F >\fP, and \fBModularArithmetic\fP\&.
.SS "template<class T> virtual bool \fBAbstractGroup\fP< T >::InversionIsFast () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determine if inversion is fast\&. 
.PP
\fBReturns\fP
.RS 4
true if inversion is fast, false otherwise 
.RE
.PP

.PP
Reimplemented in \fBEC2N\fP, and \fBECP\fP\&.
.SS "template<class T> T & \fBAbstractGroup\fP< T >::Reduce (Element & a, const Element & b) const\fR [virtual]\fP"

.PP
Reduces an element in the congruence class\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP element to reduce 
.br
\fIb\fP the congruence class 
.RE
.PP
\fBReturns\fP
.RS 4
the reduced element 
.RE
.PP

.PP
Reimplemented in \fBEuclideanDomainOf< T >\fP, \fBEuclideanDomainOf< PolynomialMod2 >\fP, and \fBGFP2_ONB< F >\fP\&.
.SS "template<class T> T \fBAbstractGroup\fP< T >::ScalarMultiply (const Element & a, const \fBInteger\fP & e) const\fR [virtual]\fP"

.PP
Performs a scalar multiplication\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP multiplicand 
.br
\fIe\fP multiplier 
.RE
.PP
\fBReturns\fP
.RS 4
the product 
.RE
.PP

.SS "template<class T> void \fBAbstractGroup\fP< T >::SimultaneousMultiply (Element * results, const Element & base, const \fBInteger\fP * exponents, unsigned int exponentsCount) const\fR [virtual]\fP"

.PP
Multiplies a base to multiple exponents in a group\&. 
.PP
\fBParameters\fP
.RS 4
\fIresults\fP an array of Elements 
.br
\fIbase\fP the base to raise to the exponents 
.br
\fIexponents\fP an array of exponents 
.br
\fIexponentsCount\fP the number of exponents in the array
.RE
.PP
\fBSimultaneousMultiply()\fP multiplies the base to each exponent in the exponents array and stores the result at the respective position in the results array\&.

.PP
\fBSimultaneousMultiply()\fP must be implemented in a derived class\&. 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(results) == exponentsCount\fP 

.PP
\fRCOUNTOF(exponents) == exponentsCount\fP 
.RE
.PP

.SS "template<class T> const T & \fBAbstractGroup\fP< T >::Subtract (const Element & a, const Element & b) const\fR [virtual]\fP"

.PP
Subtracts elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
the difference of \fRa\fP and \fRb\fP\&. The element \fRa\fP must provide a Subtract member function\&. 
.RE
.PP

.PP
Reimplemented in \fBEuclideanDomainOf< T >\fP, \fBEuclideanDomainOf< PolynomialMod2 >\fP, and \fBGFP2_ONB< F >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
