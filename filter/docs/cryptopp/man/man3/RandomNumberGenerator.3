.TH "RandomNumberGenerator" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RandomNumberGenerator \- Interface for random number generators\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <cryptlib\&.h>\fP
.PP
Inherits \fBAlgorithm\fP\&.
.PP
Inherited by \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x10DCD, 4537 >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x6C078965, 5489 >\fP, \fBAdditiveCipherTemplate< BASE >\fP, \fBClassNullRNG\fP, \fBDARN\fP, \fBFixedRNG\fP, \fBKDF2_RNG\fP, \fBLC_RNG\fP, \fBMersenneTwister< K, M, N, F, S >\fP, \fBNIST_DRBG\fP, \fBOldRandomPool\fP, \fBPadlockRNG\fP, \fBPublicBlumBlumShub\fP, \fBRDRAND\fP, \fBRDSEED\fP, \fBRandomPool\fP, \fBWeak1::ARC4_Base\fP, and \fBX917RNG\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBIncorporateEntropy\fP (const \fBbyte\fP *input, size_t length)"
.br
.RI "Update RNG state with additional unpredictable values\&. "
.ti -1c
.RI "virtual bool \fBCanIncorporateEntropy\fP () const"
.br
.RI "Determines if a generator can accept additional entropy\&. "
.ti -1c
.RI "virtual \fBbyte\fP \fBGenerateByte\fP ()"
.br
.RI "Generate new random byte and return it\&. "
.ti -1c
.RI "virtual unsigned int \fBGenerateBit\fP ()"
.br
.RI "Generate new random bit and return it\&. "
.ti -1c
.RI "virtual \fBword32\fP \fBGenerateWord32\fP (\fBword32\fP min=0, \fBword32\fP max=0xffffffffUL)"
.br
.RI "Generate a random 32 bit word in the range min to max, inclusive\&. "
.ti -1c
.RI "virtual void \fBGenerateBlock\fP (\fBbyte\fP *output, size_t size)"
.br
.RI "Generate random array of bytes\&. "
.ti -1c
.RI "virtual void \fBGenerateIntoBufferedTransformation\fP (\fBBufferedTransformation\fP &target, const std::string &channel, \fBlword\fP length)"
.br
.RI "Generate random bytes into a \fBBufferedTransformation\fP\&. "
.ti -1c
.RI "virtual void \fBDiscardBytes\fP (size_t n)"
.br
.RI "Generate and discard n bytes\&. "
.ti -1c
.RI "template<class IT> void \fBShuffle\fP (IT begin, IT end)"
.br
.RI "Randomly shuffle the specified array\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SH "Detailed Description"
.PP 
Interface for random number generators\&. 

The library provides a number of random number generators, from software based to hardware based generators\&.

.PP
All generated values are uniformly distributed over the range specified\&. 
.PP
\fBSince\fP
.RS 4
Crypto++ 3\&.1 
.RE
.PP
\fBSee also\fP
.RS 4
\fRRandomNumberGenerator\fP on the Crypto++ wiki 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual bool RandomNumberGenerator::CanIncorporateEntropy () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determines if a generator can accept additional entropy\&. 
.PP
\fBReturns\fP
.RS 4
true if \fBIncorporateEntropy()\fP is implemented 
.RE
.PP

.PP
Reimplemented in \fBMersenneTwister< K, M, N, F, S >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x10DCD, 4537 >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x6C078965, 5489 >\fP, \fBNIST_DRBG\fP, \fBOldRandomPool\fP, and \fBRandomPool\fP\&.
.SS "void RandomNumberGenerator::DiscardBytes (size_t n)\fR [virtual]\fP"

.PP
Generate and discard n bytes\&. 
.PP
\fBParameters\fP
.RS 4
\fIn\fP the number of bytes to generate and discard 
.RE
.PP

.PP
Reimplemented in \fBDARN\fP, \fBMersenneTwister< K, M, N, F, S >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x10DCD, 4537 >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x6C078965, 5489 >\fP, \fBPadlockRNG\fP, \fBRDRAND\fP, \fBRDSEED\fP, and \fBWeak1::ARC4_Base\fP\&.
.SS "unsigned int RandomNumberGenerator::GenerateBit ()\fR [virtual]\fP"

.PP
Generate new random bit and return it\&. 
.PP
\fBReturns\fP
.RS 4
a random bit
.RE
.PP
The default implementation calls \fBGenerateByte()\fP and return its lowest bit\&.

.PP
All generated values are uniformly distributed over the range specified within the the constraints of a particular generator\&. 
.PP
Reimplemented in \fBPublicBlumBlumShub\fP\&.
.SS "void RandomNumberGenerator::GenerateBlock (\fBbyte\fP * output, size_t size)\fR [virtual]\fP"

.PP
Generate random array of bytes\&. 
.PP
\fBParameters\fP
.RS 4
\fIoutput\fP the byte buffer 
.br
\fIsize\fP the length of the buffer, in bytes
.RE
.PP
All generated values are uniformly distributed over the range specified within the the constraints of a particular generator\&. 
.PP
\fBNote\fP
.RS 4
A derived generator \fImust\fP override either \fBGenerateBlock()\fP or \fBGenerateIntoBufferedTransformation()\fP\&. They can override both, or have one call the other\&. 
.RE
.PP

.PP
Reimplemented in \fBAdditiveCipherTemplate< BASE >\fP, \fBClassNullRNG\fP, \fBDARN\fP, \fBFixedRNG\fP, \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, \fBKDF2_RNG\fP, \fBLC_RNG\fP, \fBMersenneTwister< K, M, N, F, S >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x10DCD, 4537 >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x6C078965, 5489 >\fP, \fBNIST_DRBG\fP, \fBOldRandomPool\fP, \fBPadlockRNG\fP, \fBPublicBlumBlumShub\fP, \fBRDRAND\fP, \fBRDSEED\fP, and \fBWeak1::ARC4_Base\fP\&.
.SS "\fBbyte\fP RandomNumberGenerator::GenerateByte ()\fR [virtual]\fP"

.PP
Generate new random byte and return it\&. 
.PP
\fBReturns\fP
.RS 4
a random 8-bit byte
.RE
.PP
Default implementation calls \fBGenerateBlock()\fP with one byte\&.

.PP
All generated values are uniformly distributed over the range specified within the the constraints of a particular generator\&. 
.PP
Reimplemented in \fBOldRandomPool\fP, and \fBPublicBlumBlumShub\fP\&.
.SS "void RandomNumberGenerator::GenerateIntoBufferedTransformation (\fBBufferedTransformation\fP & target, const std::string & channel, \fBlword\fP length)\fR [virtual]\fP"

.PP
Generate random bytes into a \fBBufferedTransformation\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP the \fBBufferedTransformation\fP object which receives the bytes 
.br
\fIchannel\fP the channel on which the bytes should be pumped 
.br
\fIlength\fP the number of bytes to generate
.RE
.PP
The default implementation calls \fBGenerateBlock()\fP and pumps the result into the DEFAULT_CHANNEL of the target\&.

.PP
All generated values are uniformly distributed over the range specified within the the constraints of a particular generator\&. 
.PP
\fBNote\fP
.RS 4
A derived generator \fImust\fP override either \fBGenerateBlock()\fP or \fBGenerateIntoBufferedTransformation()\fP\&. They can override both, or have one call the other\&. 
.RE
.PP

.PP
Reimplemented in \fBOldRandomPool\fP, \fBRandomPool\fP, and \fBX917RNG\fP\&.
.SS "\fBword32\fP RandomNumberGenerator::GenerateWord32 (\fBword32\fP min = \fR0\fP, \fBword32\fP max = \fR0xffffffffUL\fP)\fR [virtual]\fP"

.PP
Generate a random 32 bit word in the range min to max, inclusive\&. 
.PP
\fBParameters\fP
.RS 4
\fImin\fP the lower bound of the range 
.br
\fImax\fP the upper bound of the range 
.RE
.PP
\fBReturns\fP
.RS 4
a random 32-bit word
.RE
.PP
The default implementation calls \fBCrop()\fP on the difference between max and min, and then returns the result added to min\&.

.PP
All generated values are uniformly distributed over the range specified within the the constraints of a particular generator\&. 
.PP
Reimplemented in \fBMersenneTwister< K, M, N, F, S >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x10DCD, 4537 >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x6C078965, 5489 >\fP, and \fBOldRandomPool\fP\&.
.SS "virtual void RandomNumberGenerator::IncorporateEntropy (const \fBbyte\fP * input, size_t length)\fR [inline]\fP, \fR [virtual]\fP"

.PP
Update RNG state with additional unpredictable values\&. 
.PP
\fBParameters\fP
.RS 4
\fIinput\fP the entropy to add to the generator 
.br
\fIlength\fP the size of the input buffer 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBNotImplemented\fP\fP 
.RE
.PP
A generator may or may not accept additional entropy\&. Call \fBCanIncorporateEntropy()\fP to test for the ability to use additional entropy\&.

.PP
If a derived class does not override \fBIncorporateEntropy()\fP, then the base class throws \fBNotImplemented\fP\&. 
.PP
Reimplemented in \fBDARN\fP, \fBHash_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, \fBHMAC_DRBG< HASH, STRENGTH, SEEDLENGTH >\fP, \fBMersenneTwister< K, M, N, F, S >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x10DCD, 4537 >\fP, \fBMersenneTwister< 0x9908B0DF, 397, 624, 0x6C078965, 5489 >\fP, \fBNIST_DRBG\fP, \fBOldRandomPool\fP, \fBPadlockRNG\fP, \fBRandomPool\fP, \fBRDRAND\fP, and \fBRDSEED\fP\&.
.SS "template<class IT> void RandomNumberGenerator::Shuffle (IT begin, IT end)\fR [inline]\fP"

.PP
Randomly shuffle the specified array\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP an iterator to the first element in the array 
.br
\fIend\fP an iterator beyond the last element in the array
.RE
.PP
The resulting permutation is uniformly distributed\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
