.TH "GeneratableCryptoMaterial" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GeneratableCryptoMaterial \- Interface for crypto material\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <cryptlib\&.h>\fP
.PP
Inherits \fBCryptoMaterial\fP\&.
.PP
Inherited by \fBCryptoParameters\fP, and \fBPrivateKey\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBGenerateRandom\fP (\fBRandomNumberGenerator\fP &rng, const \fBNameValuePairs\fP &params=g_nullNameValuePairs)"
.br
.RI "Generate a random key or crypto parameters\&. "
.ti -1c
.RI "void \fBGenerateRandomWithKeySize\fP (\fBRandomNumberGenerator\fP &rng, unsigned int keySize)"
.br
.RI "Generate a random key or crypto parameters\&. "
.in -1c

Public Member Functions inherited from \fBCryptoMaterial\fP
.in +1c
.ti -1c
.RI "virtual void \fBAssignFrom\fP (const \fBNameValuePairs\fP &source)=0"
.br
.RI "Assign values to this object\&. "
.ti -1c
.RI "virtual bool \fBValidate\fP (\fBRandomNumberGenerator\fP &rng, unsigned int level) const =0"
.br
.RI "Check this object for errors\&. "
.ti -1c
.RI "virtual void \fBThrowIfInvalid\fP (\fBRandomNumberGenerator\fP &rng, unsigned int level) const"
.br
.RI "Check this object for errors\&. "
.ti -1c
.RI "virtual void \fBSave\fP (\fBBufferedTransformation\fP &bt) const"
.br
.RI "Saves a key to a \fBBufferedTransformation\fP\&. "
.ti -1c
.RI "virtual void \fBLoad\fP (\fBBufferedTransformation\fP &bt)"
.br
.RI "Loads a key from a \fBBufferedTransformation\fP\&. "
.ti -1c
.RI "virtual bool \fBSupportsPrecomputation\fP () const"
.br
.RI "Determines whether the object supports precomputation\&. "
.ti -1c
.RI "virtual void \fBPrecompute\fP (unsigned int precomputationStorage)"
.br
.RI "Perform precomputation\&. "
.ti -1c
.RI "virtual void \fBLoadPrecomputation\fP (\fBBufferedTransformation\fP &storedPrecomputation)"
.br
.RI "Retrieve previously saved precomputation\&. "
.ti -1c
.RI "virtual void \fBSavePrecomputation\fP (\fBBufferedTransformation\fP &storedPrecomputation) const"
.br
.RI "Save precomputation for later use\&. "
.ti -1c
.RI "void \fBDoQuickSanityCheck\fP () const"
.br
.RI "Perform a quick sanity check\&. "
.in -1c

Public Member Functions inherited from \fBNameValuePairs\fP
.in +1c
.ti -1c
.RI "template<class T> bool \fBGetThisObject\fP (T &object) const"
.br
.RI "Get a copy of this object or subobject\&. "
.ti -1c
.RI "template<class T> bool \fBGetThisPointer\fP (T *&ptr) const"
.br
.RI "Get a pointer to this object\&. "
.ti -1c
.RI "template<class T> bool \fBGetValue\fP (const char *name, T &value) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "template<class T> T \fBGetValueWithDefault\fP (const char *name, T defaultValue) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "CRYPTOPP_DLL std::string \fBGetValueNames\fP () const"
.br
.RI "Get a list of value names that can be retrieved\&. "
.ti -1c
.RI "CRYPTOPP_DLL bool \fBGetIntValue\fP (const char *name, int &value) const"
.br
.RI "Get a named value with type int\&. "
.ti -1c
.RI "CRYPTOPP_DLL int \fBGetIntValueWithDefault\fP (const char *name, int defaultValue) const"
.br
.RI "Get a named value with type int, with default\&. "
.ti -1c
.RI "CRYPTOPP_DLL bool \fBGetWord64Value\fP (const char *name, word64 &value) const"
.br
.RI "Get a named value with type word64\&. "
.ti -1c
.RI "CRYPTOPP_DLL word64 \fBGetWord64ValueWithDefault\fP (const char *name, word64 defaultValue) const"
.br
.RI "Get a named value with type word64, with default\&. "
.ti -1c
.RI "template<class T> void \fBGetRequiredParameter\fP (const char *className, const char *name, T &value) const"
.br
.RI "Retrieves a required name/value pair\&. "
.ti -1c
.RI "CRYPTOPP_DLL void \fBGetRequiredIntParameter\fP (const char *className, const char *name, int &value) const"
.br
.RI "Retrieves a required name/value pair\&. "
.ti -1c
.RI "virtual CRYPTOPP_DLL bool \fBGetVoidValue\fP (const char *name, const std::type_info &valueType, void *pValue) const =0"
.br
.RI "Get a named value\&. "
.in -1c
.SS "Additional Inherited Members"


Static Public Member Functions inherited from \fBNameValuePairs\fP
.in +1c
.ti -1c
.RI "static CRYPTOPP_DLL void CRYPTOPP_API \fBThrowIfTypeMismatch\fP (const char *name, const std::type_info &stored, const std::type_info &retrieving)"
.br
.RI "Ensures an expected name and type is present\&. "
.in -1c
.SH "Detailed Description"
.PP 
Interface for crypto material\&. 

\fBGeneratableCryptoMaterial()\fP is an interface for crypto material, such as private keys and crypto parameters\&. Derived classes offer public methods such as \fBGenerateRandom()\fP and \fBGenerateRandomWithKeySize()\fP\&. 
.PP
\fBSee also\fP
.RS 4
\fBCryptoMaterial()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "virtual void GeneratableCryptoMaterial::GenerateRandom (\fBRandomNumberGenerator\fP & rng, const \fBNameValuePairs\fP & params = \fRg_nullNameValuePairs\fP)\fR [inline]\fP, \fR [virtual]\fP"

.PP
Generate a random key or crypto parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP to produce keying material 
.br
\fIparams\fP additional initialization parameters 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyingErr\fP if a key can't be generated or algorithm parameters are invalid
.RE
.PP
If a derived class does not override \fBGenerateRandom()\fP, then the base class throws \fBNotImplemented\fP\&. 
.PP
Reimplemented in \fBDL_GroupParameters_DSA\fP, \fBDL_GroupParameters_EC< EC >\fP, \fBDL_GroupParameters_IntegerBased\fP, \fBDL_PrivateKeyImpl< GP >\fP, \fBDL_PrivateKeyImpl< DL_GroupParameters_EC< EC > >\fP, \fBed25519PrivateKey\fP, \fBInvertibleESIGNFunction\fP, \fBInvertibleLUCFunction\fP, \fBInvertibleRabinFunction\fP, \fBInvertibleRSAFunction\fP, \fBInvertibleRWFunction\fP, and \fBx25519\fP\&.
.SS "void GeneratableCryptoMaterial::GenerateRandomWithKeySize (\fBRandomNumberGenerator\fP & rng, unsigned int keySize)"

.PP
Generate a random key or crypto parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP to produce keying material 
.br
\fIkeySize\fP the size of the key, in bits 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIKeyingErr\fP if a key can't be generated or algorithm parameters are invalid
.RE
.PP
GenerateRandomWithKeySize calls \fBGenerateRandom()\fP with a \fBNameValuePairs\fP object with only "KeySize" 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
