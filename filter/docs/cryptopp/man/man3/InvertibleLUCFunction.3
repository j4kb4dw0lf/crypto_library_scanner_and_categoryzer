.TH "InvertibleLUCFunction" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
InvertibleLUCFunction \- The \fBLUC\fP inverse function\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <luc\&.h>\fP
.PP
Inherits \fBLUCFunction\fP, \fBTrapdoorFunctionInverse\fP, and \fBPrivateKey\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBInitialize\fP (\fBRandomNumberGenerator\fP &rng, unsigned int modulusBits, const \fBInteger\fP &eStart=17)"
.br
.RI "Create a \fBLUC\fP private key\&. "
.ti -1c
.RI "void \fBInitialize\fP (const \fBInteger\fP &n, const \fBInteger\fP &e, const \fBInteger\fP &p, const \fBInteger\fP &q, const \fBInteger\fP &u)"
.br
.RI "Initialize a \fBLUC\fP private key with {n,e,p,q,dp,dq,u}\&. "
.ti -1c
.RI "void \fBBERDecode\fP (\fBBufferedTransformation\fP &bt)"
.br
.ti -1c
.RI "void \fBDEREncode\fP (\fBBufferedTransformation\fP &bt) const"
.br
.ti -1c
.RI "\fBInteger\fP \fBCalculateInverse\fP (\fBRandomNumberGenerator\fP &rng, const \fBInteger\fP &x) const"
.br
.RI "Calculates the inverse of an element\&. "
.ti -1c
.RI "bool \fBValidate\fP (\fBRandomNumberGenerator\fP &rng, unsigned int level) const"
.br
.RI "Check this object for errors\&. "
.ti -1c
.RI "bool \fBGetVoidValue\fP (const char *name, const std::type_info &valueType, void *pValue) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "void \fBAssignFrom\fP (const \fBNameValuePairs\fP &source)"
.br
.RI "Assign values to this object\&. "
.ti -1c
.RI "void \fBGenerateRandom\fP (\fBRandomNumberGenerator\fP &rng, const \fBNameValuePairs\fP &alg)"
.br
.ti -1c
.RI "const \fBInteger\fP & \fBGetPrime1\fP () const"
.br
.ti -1c
.RI "const \fBInteger\fP & \fBGetPrime2\fP () const"
.br
.ti -1c
.RI "const \fBInteger\fP & \fBGetMultiplicativeInverseOfPrime2ModPrime1\fP () const"
.br
.ti -1c
.RI "void \fBSetPrime1\fP (const \fBInteger\fP &p)"
.br
.ti -1c
.RI "void \fBSetPrime2\fP (const \fBInteger\fP &q)"
.br
.ti -1c
.RI "void \fBSetMultiplicativeInverseOfPrime2ModPrime1\fP (const \fBInteger\fP &u)"
.br
.in -1c

Public Member Functions inherited from \fBLUCFunction\fP
.in +1c
.ti -1c
.RI "void \fBInitialize\fP (const \fBInteger\fP &n, const \fBInteger\fP &e)"
.br
.RI "Initialize a \fBLUC\fP public key with {n,e}\&. "
.ti -1c
.RI "void \fBBERDecode\fP (\fBBufferedTransformation\fP &bt)"
.br
.ti -1c
.RI "void \fBDEREncode\fP (\fBBufferedTransformation\fP &bt) const"
.br
.ti -1c
.RI "\fBInteger\fP \fBApplyFunction\fP (const \fBInteger\fP &x) const"
.br
.RI "Applies the trapdoor\&. "
.ti -1c
.RI "\fBInteger\fP \fBPreimageBound\fP () const"
.br
.RI "Returns the maximum size of a message before the trapdoor function is applied\&. "
.ti -1c
.RI "\fBInteger\fP \fBImageBound\fP () const"
.br
.RI "Returns the maximum size of a representation after the trapdoor function is applied\&. "
.ti -1c
.RI "bool \fBValidate\fP (\fBRandomNumberGenerator\fP &rng, unsigned int level) const"
.br
.RI "Check this object for errors\&. "
.ti -1c
.RI "bool \fBGetVoidValue\fP (const char *name, const std::type_info &valueType, void *pValue) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "void \fBAssignFrom\fP (const \fBNameValuePairs\fP &source)"
.br
.RI "Assign values to this object\&. "
.ti -1c
.RI "const \fBInteger\fP & \fBGetModulus\fP () const"
.br
.ti -1c
.RI "const \fBInteger\fP & \fBGetPublicExponent\fP () const"
.br
.ti -1c
.RI "void \fBSetModulus\fP (const \fBInteger\fP &n)"
.br
.ti -1c
.RI "void \fBSetPublicExponent\fP (const \fBInteger\fP &e)"
.br
.in -1c

Public Member Functions inherited from \fBTrapdoorFunction\fP
.in +1c
.ti -1c
.RI "\fBInteger\fP \fBApplyRandomizedFunction\fP (\fBRandomNumberGenerator\fP &rng, const \fBInteger\fP &x) const"
.br
.RI "Applies the trapdoor function\&. "
.ti -1c
.RI "bool \fBIsRandomized\fP () const"
.br
.RI "Determines if the encryption algorithm is randomized\&. "
.in -1c

Public Member Functions inherited from \fBTrapdoorFunctionBounds\fP
.in +1c
.ti -1c
.RI "virtual \fBInteger\fP \fBMaxPreimage\fP () const"
.br
.RI "Returns the maximum size of a message before the trapdoor function is applied bound to a public key\&. "
.ti -1c
.RI "virtual \fBInteger\fP \fBMaxImage\fP () const"
.br
.RI "Returns the maximum size of a representation after the trapdoor function is applied bound to a public key\&. "
.in -1c

Public Member Functions inherited from \fBCryptoMaterial\fP
.in +1c
.ti -1c
.RI "virtual void \fBThrowIfInvalid\fP (\fBRandomNumberGenerator\fP &rng, unsigned int level) const"
.br
.RI "Check this object for errors\&. "
.ti -1c
.RI "virtual void \fBSave\fP (\fBBufferedTransformation\fP &bt) const"
.br
.RI "Saves a key to a \fBBufferedTransformation\fP\&. "
.ti -1c
.RI "virtual void \fBLoad\fP (\fBBufferedTransformation\fP &bt)"
.br
.RI "Loads a key from a \fBBufferedTransformation\fP\&. "
.ti -1c
.RI "virtual bool \fBSupportsPrecomputation\fP () const"
.br
.RI "Determines whether the object supports precomputation\&. "
.ti -1c
.RI "virtual void \fBPrecompute\fP (unsigned int precomputationStorage)"
.br
.RI "Perform precomputation\&. "
.ti -1c
.RI "virtual void \fBLoadPrecomputation\fP (\fBBufferedTransformation\fP &storedPrecomputation)"
.br
.RI "Retrieve previously saved precomputation\&. "
.ti -1c
.RI "virtual void \fBSavePrecomputation\fP (\fBBufferedTransformation\fP &storedPrecomputation) const"
.br
.RI "Save precomputation for later use\&. "
.ti -1c
.RI "void \fBDoQuickSanityCheck\fP () const"
.br
.RI "Perform a quick sanity check\&. "
.in -1c

Public Member Functions inherited from \fBNameValuePairs\fP
.in +1c
.ti -1c
.RI "template<class T> bool \fBGetThisObject\fP (T &object) const"
.br
.RI "Get a copy of this object or subobject\&. "
.ti -1c
.RI "template<class T> bool \fBGetThisPointer\fP (T *&ptr) const"
.br
.RI "Get a pointer to this object\&. "
.ti -1c
.RI "template<class T> bool \fBGetValue\fP (const char *name, T &value) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "template<class T> T \fBGetValueWithDefault\fP (const char *name, T defaultValue) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "CRYPTOPP_DLL std::string \fBGetValueNames\fP () const"
.br
.RI "Get a list of value names that can be retrieved\&. "
.ti -1c
.RI "CRYPTOPP_DLL bool \fBGetIntValue\fP (const char *name, int &value) const"
.br
.RI "Get a named value with type int\&. "
.ti -1c
.RI "CRYPTOPP_DLL int \fBGetIntValueWithDefault\fP (const char *name, int defaultValue) const"
.br
.RI "Get a named value with type int, with default\&. "
.ti -1c
.RI "CRYPTOPP_DLL bool \fBGetWord64Value\fP (const char *name, word64 &value) const"
.br
.RI "Get a named value with type word64\&. "
.ti -1c
.RI "CRYPTOPP_DLL word64 \fBGetWord64ValueWithDefault\fP (const char *name, word64 defaultValue) const"
.br
.RI "Get a named value with type word64, with default\&. "
.ti -1c
.RI "template<class T> void \fBGetRequiredParameter\fP (const char *className, const char *name, T &value) const"
.br
.RI "Retrieves a required name/value pair\&. "
.ti -1c
.RI "CRYPTOPP_DLL void \fBGetRequiredIntParameter\fP (const char *className, const char *name, int &value) const"
.br
.RI "Retrieves a required name/value pair\&. "
.in -1c

Public Member Functions inherited from \fBTrapdoorFunctionInverse\fP
.in +1c
.ti -1c
.RI "\fBInteger\fP \fBCalculateRandomizedInverse\fP (\fBRandomNumberGenerator\fP &rng, const \fBInteger\fP &x) const"
.br
.RI "Applies the inverse of the trapdoor function\&. "
.ti -1c
.RI "bool \fBIsRandomized\fP () const"
.br
.RI "Determines if the decryption algorithm is randomized\&. "
.in -1c

Public Member Functions inherited from \fBGeneratableCryptoMaterial\fP
.in +1c
.ti -1c
.RI "void \fBGenerateRandomWithKeySize\fP (\fBRandomNumberGenerator\fP &rng, unsigned int keySize)"
.br
.RI "Generate a random key or crypto parameters\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBInteger\fP \fBm_p\fP"
.br
.ti -1c
.RI "\fBInteger\fP \fBm_q\fP"
.br
.ti -1c
.RI "\fBInteger\fP \fBm_u\fP"
.br
.in -1c

Protected Attributes inherited from \fBLUCFunction\fP
.in +1c
.ti -1c
.RI "\fBInteger\fP \fBm_n\fP"
.br
.ti -1c
.RI "\fBInteger\fP \fBm_e\fP"
.br
.in -1c
.SS "Additional Inherited Members"


Static Public Member Functions inherited from \fBNameValuePairs\fP
.in +1c
.ti -1c
.RI "static CRYPTOPP_DLL void CRYPTOPP_API \fBThrowIfTypeMismatch\fP (const char *name, const std::type_info &stored, const std::type_info &retrieving)"
.br
.RI "Ensures an expected name and type is present\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBLUC\fP inverse function\&. 

This class is here for historical and pedagogical interest\&. It has no practical advantages over other trapdoor functions and probably shouldn't be used in production software\&. The discrete log based \fBLUC\fP schemes defined later in this \&.h file may be of more practical interest\&. 
.PP
\fBSince\fP
.RS 4
Crypto++ 2\&.1 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void InvertibleLUCFunction::AssignFrom (const \fBNameValuePairs\fP & source)\fR [virtual]\fP"

.PP
Assign values to this object\&. This function can be used to create a public key from a private key\&. 
.PP
Implements \fBCryptoMaterial\fP\&.
.SS "\fBInteger\fP InvertibleLUCFunction::CalculateInverse (\fBRandomNumberGenerator\fP & rng, const \fBInteger\fP & x) const\fR [virtual]\fP"

.PP
Calculates the inverse of an element\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIx\fP the element 
.RE
.PP
\fBReturns\fP
.RS 4
the inverse of the element in the group 
.RE
.PP

.PP
Implements \fBTrapdoorFunctionInverse\fP\&.
.SS "void InvertibleLUCFunction::GenerateRandom (\fBRandomNumberGenerator\fP & rng, const \fBNameValuePairs\fP & alg)\fR [virtual]\fP"
parameters: (ModulusSize, PublicExponent (default 17)) 
.PP
Reimplemented from \fBGeneratableCryptoMaterial\fP\&.
.SS "bool InvertibleLUCFunction::GetVoidValue (const char * name, const std::type_info & valueType, void * pValue) const\fR [virtual]\fP"

.PP
Get a named value\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP the name of the object or value to retrieve 
.br
\fIvalueType\fP reference to a variable that receives the value 
.br
\fIpValue\fP void pointer to a variable that receives the value 
.RE
.PP
\fBReturns\fP
.RS 4
true if the value was retrieved, false otherwise
.RE
.PP
\fBGetVoidValue()\fP retrieves the value of name if it exists\&. 
.PP
\fBNote\fP
.RS 4
\fBGetVoidValue()\fP is an internal function and should be implemented by derived classes\&. Users should use one of the other functions instead\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBGetValue()\fP, \fBGetValueWithDefault()\fP, \fBGetIntValue()\fP, \fBGetIntValueWithDefault()\fP, \fBGetRequiredParameter()\fP and \fBGetRequiredIntParameter()\fP 
.RE
.PP

.PP
Implements \fBNameValuePairs\fP\&.
.SS "void InvertibleLUCFunction::Initialize (const \fBInteger\fP & n, const \fBInteger\fP & e, const \fBInteger\fP & p, const \fBInteger\fP & q, const \fBInteger\fP & u)\fR [inline]\fP"

.PP
Initialize a \fBLUC\fP private key with {n,e,p,q,dp,dq,u}\&. 
.PP
\fBParameters\fP
.RS 4
\fIn\fP modulus 
.br
\fIe\fP public exponent 
.br
\fIp\fP first prime factor 
.br
\fIq\fP second prime factor 
.br
\fIu\fP q\*{-1\*}  mod p
.RE
.PP
This \fBInitialize()\fP function overload initializes a private key from existing parameters\&. 
.SS "void InvertibleLUCFunction::Initialize (\fBRandomNumberGenerator\fP & rng, unsigned int modulusBits, const \fBInteger\fP & eStart = \fR17\fP)"

.PP
Create a \fBLUC\fP private key\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fImodulusBits\fP the size of the modulus, in bits 
.br
\fIeStart\fP the desired starting public exponent
.RE
.PP
\fBInitialize()\fP creates a new keypair using a starting public exponent of 17\&.

.PP
This function overload of \fBInitialize()\fP creates a new keypair because it takes a \fBRandomNumberGenerator()\fP as a parameter\&. If you have an existing keypair, then use one of the other \fBInitialize()\fP overloads\&. 
.SS "bool InvertibleLUCFunction::Validate (\fBRandomNumberGenerator\fP & rng, unsigned int level) const\fR [virtual]\fP"

.PP
Check this object for errors\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP for objects which use randomized testing 
.br
\fIlevel\fP the level of thoroughness 
.RE
.PP
\fBReturns\fP
.RS 4
true if the tests succeed, false otherwise
.RE
.PP
There are four levels of thoroughness: 
.PD 0
.IP "\(bu" 2
0 - using this object won't cause a crash or exception 
.IP "\(bu" 2
1 - this object will probably function, and encrypt, sign, other operations correctly 
.IP "\(bu" 2
2 - ensure this object will function correctly, and perform reasonable security checks 
.IP "\(bu" 2
3 - perform reasonable security checks, and do checks that may take a long time 
.PP

.PP
Level 0 does not require a \fBRandomNumberGenerator\fP\&. A \fBNullRNG()\fP can be used for level 0\&. Level 1 may not check for weak keys and such\&. Levels 2 and 3 are recommended\&. 
.PP
\fBSee also\fP
.RS 4
\fBThrowIfInvalid()\fP 
.RE
.PP

.PP
Implements \fBCryptoMaterial\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
