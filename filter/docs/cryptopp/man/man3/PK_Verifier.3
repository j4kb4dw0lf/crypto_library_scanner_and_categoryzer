.TH "PK_Verifier" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PK_Verifier \- Interface for public-key signature verifiers\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <cryptlib\&.h>\fP
.PP
Inherits \fBPK_SignatureScheme\fP, and \fBPublicKeyAlgorithm\fP\&.
.PP
Inherited by \fBDL_SignatureSchemeBase< PK_Verifier, DL_PublicKey< T > >\fP, \fBDL_SignatureSchemeBase< PK_Verifier, DL_PublicKey< SCHEME_OPTIONS::Element > >\fP, \fBTF_SignatureSchemeBase< PK_Verifier, TF_Base< TrapdoorFunction, PK_SignatureMessageEncodingMethod > >\fP, and \fBed25519Verifier\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBPK_MessageAccumulator\fP * \fBNewVerificationAccumulator\fP () const =0"
.br
.RI "Create a new \fBHashTransformation\fP to accumulate the message to be verified\&. "
.ti -1c
.RI "virtual void \fBInputSignature\fP (\fBPK_MessageAccumulator\fP &messageAccumulator, const \fBbyte\fP *signature, size_t signatureLength) const =0"
.br
.RI "Input signature into a message accumulator\&. "
.ti -1c
.RI "virtual bool \fBVerify\fP (\fBPK_MessageAccumulator\fP *messageAccumulator) const"
.br
.RI "Check whether messageAccumulator contains a valid signature and message\&. "
.ti -1c
.RI "virtual bool \fBVerifyAndRestart\fP (\fBPK_MessageAccumulator\fP &messageAccumulator) const =0"
.br
.RI "Check whether messageAccumulator contains a valid signature and message, and restart messageAccumulator\&. "
.ti -1c
.RI "virtual bool \fBVerifyMessage\fP (const \fBbyte\fP *message, size_t messageLen, const \fBbyte\fP *signature, size_t signatureLen) const"
.br
.RI "Check whether input signature is a valid signature for input message\&. "
.ti -1c
.RI "virtual \fBDecodingResult\fP \fBRecover\fP (\fBbyte\fP *recoveredMessage, \fBPK_MessageAccumulator\fP *messageAccumulator) const"
.br
.RI "Recover a message from its signature\&. "
.ti -1c
.RI "virtual \fBDecodingResult\fP \fBRecoverAndRestart\fP (\fBbyte\fP *recoveredMessage, \fBPK_MessageAccumulator\fP &messageAccumulator) const =0"
.br
.RI "Recover a message from its signature\&. "
.ti -1c
.RI "virtual \fBDecodingResult\fP \fBRecoverMessage\fP (\fBbyte\fP *recoveredMessage, const \fBbyte\fP *nonrecoverableMessage, size_t nonrecoverableMessageLength, const \fBbyte\fP *signature, size_t signatureLength) const"
.br
.RI "Recover a message from its signature\&. "
.in -1c

Public Member Functions inherited from \fBPK_SignatureScheme\fP
.in +1c
.ti -1c
.RI "virtual size_t \fBSignatureLength\fP () const =0"
.br
.RI "Provides the signature length if it only depends on the key\&. "
.ti -1c
.RI "virtual size_t \fBMaxSignatureLength\fP (size_t recoverablePartLength=0) const"
.br
.RI "Provides the maximum signature length produced given the length of the recoverable message part\&. "
.ti -1c
.RI "virtual size_t \fBMaxRecoverableLength\fP () const =0"
.br
.RI "Provides the length of longest message that can be recovered\&. "
.ti -1c
.RI "virtual size_t \fBMaxRecoverableLengthFromSignatureLength\fP (size_t signatureLength) const =0"
.br
.RI "Provides the length of longest message that can be recovered from a signature of given length\&. "
.ti -1c
.RI "virtual bool \fBIsProbabilistic\fP () const =0"
.br
.RI "Determines whether a signature scheme requires a random number generator\&. "
.ti -1c
.RI "virtual bool \fBAllowNonrecoverablePart\fP () const =0"
.br
.RI "Determines whether the non-recoverable message part can be signed\&. "
.ti -1c
.RI "virtual bool \fBSignatureUpfront\fP () const"
.br
.RI "Determines whether the signature must be input before the message\&. "
.ti -1c
.RI "virtual bool \fBRecoverablePartFirst\fP () const =0"
.br
.RI "Determines whether the recoverable part must be input before the non-recoverable part\&. "
.in -1c

Public Member Functions inherited from \fBPublicKeyAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBCryptoMaterial\fP & \fBAccessMaterial\fP ()"
.br
.RI "Retrieves a reference to a Public Key\&. "
.ti -1c
.RI "const \fBCryptoMaterial\fP & \fBGetMaterial\fP () const"
.br
.RI "Retrieves a reference to a Public Key\&. "
.ti -1c
.RI "virtual \fBPublicKey\fP & \fBAccessPublicKey\fP ()=0"
.br
.RI "Retrieves a reference to a Public Key\&. "
.ti -1c
.RI "virtual const \fBPublicKey\fP & \fBGetPublicKey\fP () const"
.br
.RI "Retrieves a reference to a Public Key\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SH "Detailed Description"
.PP 
Interface for public-key signature verifiers\&. 

The Recover* functions throw \fBNotImplemented\fP if the signature scheme does not support message recovery\&.

.PP
The Verify* functions throw \fBInvalidDataFormat\fP if the scheme does support message recovery and the signature contains a non-empty recoverable message part\&. The Recover* functions should be used in that case\&. 
.SH "Member Function Documentation"
.PP 
.SS "virtual void PK_Verifier::InputSignature (\fBPK_MessageAccumulator\fP & messageAccumulator, const \fBbyte\fP * signature, size_t signatureLength) const\fR [pure virtual]\fP"

.PP
Input signature into a message accumulator\&. 
.PP
\fBParameters\fP
.RS 4
\fImessageAccumulator\fP a pointer to a \fBPK_MessageAccumulator\fP derived class 
.br
\fIsignature\fP the signature on the message 
.br
\fIsignatureLength\fP the size of the signature 
.RE
.PP

.PP
Implemented in \fBDL_VerifierBase< T >\fP, \fBDL_VerifierBase< SCHEME_OPTIONS::Element >\fP, \fBed25519Verifier\fP, and \fBTF_VerifierBase\fP\&.
.SS "virtual \fBPK_MessageAccumulator\fP * PK_Verifier::NewVerificationAccumulator () const\fR [pure virtual]\fP"

.PP
Create a new \fBHashTransformation\fP to accumulate the message to be verified\&. 
.PP
\fBReturns\fP
.RS 4
a pointer to a \fBPK_MessageAccumulator\fP
.RE
.PP
\fBNewVerificationAccumulator()\fP can be used with all verification methods\&. \fBVerify()\fP will automatically delete the accumulator pointer\&. The caller is responsible for deletion if a method is called that takes a reference\&. 
.PP
Implemented in \fBDL_VerifierImpl< SCHEME_OPTIONS >\fP, and \fBed25519Verifier\fP\&.
.SS "\fBDecodingResult\fP PK_Verifier::Recover (\fBbyte\fP * recoveredMessage, \fBPK_MessageAccumulator\fP * messageAccumulator) const\fR [virtual]\fP"

.PP
Recover a message from its signature\&. 
.PP
\fBParameters\fP
.RS 4
\fIrecoveredMessage\fP a pointer to the recoverable message part to be verified 
.br
\fImessageAccumulator\fP a pointer to a \fBPK_MessageAccumulator\fP derived class 
.RE
.PP
\fBReturns\fP
.RS 4
the result of the verification operation
.RE
.PP
\fBRecover()\fP deletes the messageAccumulator, even if an exception is thrown\&. 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(recoveredMessage) == MaxRecoverableLengthFromSignatureLength(signatureLength)\fP 
.RE
.PP

.SS "virtual \fBDecodingResult\fP PK_Verifier::RecoverAndRestart (\fBbyte\fP * recoveredMessage, \fBPK_MessageAccumulator\fP & messageAccumulator) const\fR [pure virtual]\fP"

.PP
Recover a message from its signature\&. 
.PP
\fBParameters\fP
.RS 4
\fIrecoveredMessage\fP a pointer to the recoverable message part to be verified 
.br
\fImessageAccumulator\fP a pointer to a \fBPK_MessageAccumulator\fP derived class 
.RE
.PP
\fBReturns\fP
.RS 4
the result of the verification operation
.RE
.PP
\fBRecoverAndRestart()\fP restarts the messageAccumulator 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(recoveredMessage) == MaxRecoverableLengthFromSignatureLength(signatureLength)\fP 
.RE
.PP

.PP
Implemented in \fBDL_VerifierBase< T >\fP, \fBDL_VerifierBase< SCHEME_OPTIONS::Element >\fP, \fBed25519Verifier\fP, and \fBTF_VerifierBase\fP\&.
.SS "\fBDecodingResult\fP PK_Verifier::RecoverMessage (\fBbyte\fP * recoveredMessage, const \fBbyte\fP * nonrecoverableMessage, size_t nonrecoverableMessageLength, const \fBbyte\fP * signature, size_t signatureLength) const\fR [virtual]\fP"

.PP
Recover a message from its signature\&. 
.PP
\fBParameters\fP
.RS 4
\fIrecoveredMessage\fP a pointer for the recovered message 
.br
\fInonrecoverableMessage\fP a pointer to the non-recoverable message part to be signed 
.br
\fInonrecoverableMessageLength\fP the size of the non-recoverable message part 
.br
\fIsignature\fP the signature on the message 
.br
\fIsignatureLength\fP the size of the signature 
.RE
.PP
\fBReturns\fP
.RS 4
the result of the verification operation 
.RE
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(recoveredMessage) == MaxRecoverableLengthFromSignatureLength(signatureLength)\fP 
.RE
.PP

.SS "bool PK_Verifier::Verify (\fBPK_MessageAccumulator\fP * messageAccumulator) const\fR [virtual]\fP"

.PP
Check whether messageAccumulator contains a valid signature and message\&. 
.PP
\fBParameters\fP
.RS 4
\fImessageAccumulator\fP a pointer to a \fBPK_MessageAccumulator\fP derived class 
.RE
.PP
\fBReturns\fP
.RS 4
true if the signature is valid, false otherwise
.RE
.PP
\fBVerify()\fP deletes the messageAccumulator, even if an exception is thrown\&. 
.SS "virtual bool PK_Verifier::VerifyAndRestart (\fBPK_MessageAccumulator\fP & messageAccumulator) const\fR [pure virtual]\fP"

.PP
Check whether messageAccumulator contains a valid signature and message, and restart messageAccumulator\&. 
.PP
\fBParameters\fP
.RS 4
\fImessageAccumulator\fP a reference to a \fBPK_MessageAccumulator\fP derived class 
.RE
.PP
\fBReturns\fP
.RS 4
true if the signature is valid, false otherwise
.RE
.PP
\fBVerifyAndRestart()\fP restarts the messageAccumulator 
.PP
Implemented in \fBDL_VerifierBase< T >\fP, \fBDL_VerifierBase< SCHEME_OPTIONS::Element >\fP, \fBed25519Verifier\fP, and \fBTF_VerifierBase\fP\&.
.SS "bool PK_Verifier::VerifyMessage (const \fBbyte\fP * message, size_t messageLen, const \fBbyte\fP * signature, size_t signatureLen) const\fR [virtual]\fP"

.PP
Check whether input signature is a valid signature for input message\&. 
.PP
\fBParameters\fP
.RS 4
\fImessage\fP a pointer to the message to be verified 
.br
\fImessageLen\fP the size of the message 
.br
\fIsignature\fP a pointer to the signature over the message 
.br
\fIsignatureLen\fP the size of the signature 
.RE
.PP
\fBReturns\fP
.RS 4
true if the signature is valid, false otherwise 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
