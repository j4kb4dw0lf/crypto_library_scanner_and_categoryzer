.TH "RingOfPolynomialsOver< T >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RingOfPolynomialsOver< T > \- Ring of polynomials over another ring\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <polynomi\&.h>\fP
.PP
Inherits \fBAbstractEuclideanDomain< PolynomialOver< T > >\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBInterpolationFailed\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef T \fBCoefficientRing\fP"
.br
.ti -1c
.RI "typedef \fBPolynomialOver\fP< T > \fBElement\fP"
.br
.ti -1c
.RI "typedef Element::CoefficientType \fBCoefficientType\fP"
.br
.ti -1c
.RI "typedef \fBElement::RandomizationParameter\fP \fBRandomizationParameter\fP"
.br
.in -1c

Public Types inherited from \fBAbstractEuclideanDomain< PolynomialOver< T > >\fP
.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBAbstractRing< T >\fP
.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBAbstractGroup< T >\fP
.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRingOfPolynomialsOver\fP (const CoefficientRing &ring)"
.br
.ti -1c
.RI "\fBElement\fP \fBRandomElement\fP (\fBRandomNumberGenerator\fP &rng, const \fBRandomizationParameter\fP &parameter)"
.br
.ti -1c
.RI "bool \fBEqual\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBIdentity\fP () const"
.br
.RI "Provides the Identity element\&. "
.ti -1c
.RI "const \fBElement\fP & \fBAdd\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.ti -1c
.RI "\fBElement\fP & \fBAccumulate\fP (\fBElement\fP &a, const \fBElement\fP &b) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBInverse\fP (const \fBElement\fP &a) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBSubtract\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.ti -1c
.RI "\fBElement\fP & \fBReduce\fP (\fBElement\fP &a, const \fBElement\fP &b) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBDouble\fP (const \fBElement\fP &a) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBMultiplicativeIdentity\fP () const"
.br
.RI "Retrieves the multiplicative identity\&. "
.ti -1c
.RI "const \fBElement\fP & \fBMultiply\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBSquare\fP (const \fBElement\fP &a) const"
.br
.ti -1c
.RI "bool \fBIsUnit\fP (const \fBElement\fP &a) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBMultiplicativeInverse\fP (const \fBElement\fP &a) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBDivide\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBMod\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.ti -1c
.RI "void \fBDivisionAlgorithm\fP (\fBElement\fP &r, \fBElement\fP &q, const \fBElement\fP &a, const \fBElement\fP &d) const"
.br
.ti -1c
.RI "\fBElement\fP \fBInterpolate\fP (const CoefficientType x[], const CoefficientType y[], unsigned int n) const"
.br
.ti -1c
.RI "CoefficientType \fBInterpolateAt\fP (const CoefficientType &position, const CoefficientType x[], const CoefficientType y[], unsigned int n) const"
.br
.in -1c

Public Member Functions inherited from \fBAbstractEuclideanDomain< PolynomialOver< T > >\fP
.in +1c
.ti -1c
.RI "virtual void \fBDivisionAlgorithm\fP (Element &r, Element &q, const Element &a, const Element &d) const=0"
.br
.RI "Performs the division algorithm on two elements in the ring\&. "
.ti -1c
.RI "virtual const Element & \fBMod\fP (const Element &a, const Element &b) const=0"
.br
.RI "Performs a modular reduction in the ring\&. "
.ti -1c
.RI "virtual const Element & \fBGcd\fP (const Element &a, const Element &b) const"
.br
.RI "Calculates the greatest common denominator in the ring\&. "
.in -1c

Public Member Functions inherited from \fBAbstractRing< T >\fP
.in +1c
.ti -1c
.RI "\fBAbstractRing\fP ()"
.br
.RI "Construct an \fBAbstractRing\fP\&. "
.ti -1c
.RI "\fBAbstractRing\fP (const \fBAbstractRing\fP &source)"
.br
.RI "Copy construct an \fBAbstractRing\fP\&. "
.ti -1c
.RI "\fBAbstractRing\fP & \fBoperator=\fP (const \fBAbstractRing\fP &source)"
.br
.RI "Assign an \fBAbstractRing\fP\&. "
.ti -1c
.RI "virtual bool \fBIsUnit\fP (const Element &a) const =0"
.br
.RI "Determines whether an element is a unit in the group\&. "
.ti -1c
.RI "virtual const Element & \fBMultiply\fP (const Element &a, const Element &b) const =0"
.br
.RI "Multiplies elements in the group\&. "
.ti -1c
.RI "virtual const Element & \fBMultiplicativeInverse\fP (const Element &a) const =0"
.br
.RI "Calculate the multiplicative inverse of an element in the group\&. "
.ti -1c
.RI "virtual const Element & \fBSquare\fP (const Element &a) const"
.br
.RI "\fBSquare\fP an element in the group\&. "
.ti -1c
.RI "virtual const Element & \fBDivide\fP (const Element &a, const Element &b) const"
.br
.RI "Divides elements in the group\&. "
.ti -1c
.RI "virtual Element \fBExponentiate\fP (const Element &a, const \fBInteger\fP &e) const"
.br
.RI "Raises a base to an exponent in the group\&. "
.ti -1c
.RI "virtual Element \fBCascadeExponentiate\fP (const Element &x, const \fBInteger\fP &e1, const Element &y, const \fBInteger\fP &e2) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual void \fBSimultaneousExponentiate\fP (Element *results, const Element &base, const \fBInteger\fP *exponents, unsigned int exponentsCount) const"
.br
.RI "Exponentiates a base to multiple exponents in the Ring\&. "
.ti -1c
.RI "virtual const \fBAbstractGroup\fP< T > & \fBMultiplicativeGroup\fP () const"
.br
.RI "Retrieves the multiplicative group\&. "
.in -1c

Public Member Functions inherited from \fBAbstractGroup< T >\fP
.in +1c
.ti -1c
.RI "virtual bool \fBEqual\fP (const Element &a, const Element &b) const =0"
.br
.RI "Compare two elements for equality\&. "
.ti -1c
.RI "virtual const Element & \fBAdd\fP (const Element &a, const Element &b) const =0"
.br
.RI "Adds elements in the group\&. "
.ti -1c
.RI "virtual const Element & \fBInverse\fP (const Element &a) const =0"
.br
.RI "Inverts the element in the group\&. "
.ti -1c
.RI "virtual bool \fBInversionIsFast\fP () const"
.br
.RI "Determine if inversion is fast\&. "
.ti -1c
.RI "virtual const Element & \fBDouble\fP (const Element &a) const"
.br
.RI "Doubles an element in the group\&. "
.ti -1c
.RI "virtual const Element & \fBSubtract\fP (const Element &a, const Element &b) const"
.br
.RI "Subtracts elements in the group\&. "
.ti -1c
.RI "virtual Element & \fBAccumulate\fP (Element &a, const Element &b) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual Element & \fBReduce\fP (Element &a, const Element &b) const"
.br
.RI "Reduces an element in the congruence class\&. "
.ti -1c
.RI "virtual Element \fBScalarMultiply\fP (const Element &a, const \fBInteger\fP &e) const"
.br
.RI "Performs a scalar multiplication\&. "
.ti -1c
.RI "virtual Element \fBCascadeScalarMultiply\fP (const Element &x, const \fBInteger\fP &e1, const Element &y, const \fBInteger\fP &e2) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual void \fBSimultaneousMultiply\fP (Element *results, const Element &base, const \fBInteger\fP *exponents, unsigned int exponentsCount) const"
.br
.RI "Multiplies a base to multiple exponents in a group\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBCalculateAlpha\fP (std::vector< CoefficientType > &alpha, const CoefficientType x[], const CoefficientType y[], unsigned int n) const"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "CoefficientRing \fBm_ring\fP"
.br
.in -1c

Protected Attributes inherited from \fBAbstractEuclideanDomain< PolynomialOver< T > >\fP
.in +1c
.ti -1c
.RI "Element \fBresult\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T>
.br
class RingOfPolynomialsOver< T >"Ring of polynomials over another ring\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<class T> const \fBElement\fP & \fBRingOfPolynomialsOver\fP< T >::Identity () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Provides the Identity element\&. 
.PP
\fBReturns\fP
.RS 4
the Identity element 
.RE
.PP

.PP
Implements \fBAbstractGroup< T >\fP\&.
.SS "template<class T> const \fBElement\fP & \fBRingOfPolynomialsOver\fP< T >::MultiplicativeIdentity () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Retrieves the multiplicative identity\&. 
.PP
\fBReturns\fP
.RS 4
the multiplicative identity 
.RE
.PP

.PP
Implements \fBAbstractRing< T >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
