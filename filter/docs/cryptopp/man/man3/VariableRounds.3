.TH "VariableRounds< D, N, M >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VariableRounds< D, N, M > \- Inherited by algorithms with variable number of rounds\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <seckey\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (DEFAULT_ROUNDS=D)"
.br
.RI "The default number of rounds for the algorithm provided as a constant\&. "
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (MIN_ROUNDS=N)"
.br
.RI "The minimum number of rounds for the algorithm provided as a constant\&. "
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (MAX_ROUNDS=M)"
.br
.RI "The maximum number of rounds for the algorithm provided as a constant\&. "
.ti -1c
.RI "CRYPTOPP_STATIC_CONSTEXPR unsigned int \fBStaticGetDefaultRounds\fP (size_t keylength)"
.br
.RI "The default number of rounds for the algorithm based on key length provided by a static function\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBThrowIfInvalidRounds\fP (int rounds, const \fBAlgorithm\fP *alg)"
.br
.RI "Validates the number of rounds for an algorithm\&. "
.ti -1c
.RI "unsigned int \fBGetRoundsAndThrowIfInvalid\fP (const \fBNameValuePairs\fP &param, const \fBAlgorithm\fP *alg)"
.br
.RI "Validates the number of rounds for an algorithm\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<unsigned int D, unsigned int N = 1, unsigned int M = INT_MAX>
.br
class VariableRounds< D, N, M >"Inherited by algorithms with variable number of rounds\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fID\fP Default number of rounds 
.br
\fIN\fP Minimum number of rounds 
.br
\fIM\fP Maximum number of rounds 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<unsigned int D, unsigned int N = 1, unsigned int M = INT_MAX> unsigned int \fBVariableRounds\fP< D, N, M >::GetRoundsAndThrowIfInvalid (const \fBNameValuePairs\fP & param, const \fBAlgorithm\fP * alg)\fR [inline]\fP, \fR [protected]\fP"

.PP
Validates the number of rounds for an algorithm\&. 
.PP
\fBParameters\fP
.RS 4
\fIparam\fP the candidate number of rounds 
.br
\fIalg\fP an \fBAlgorithm\fP object used if the number of rounds are invalid 
.RE
.PP
\fBReturns\fP
.RS 4
the number of rounds for the algorithm 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBInvalidRounds\fP\fP if the number of rounds are invalid
.RE
.PP
\fBGetRoundsAndThrowIfInvalid()\fP validates the number of rounds and throws if invalid\&. 
.SS "template<unsigned int D, unsigned int N = 1, unsigned int M = INT_MAX> CRYPTOPP_STATIC_CONSTEXPR unsigned int \fBVariableRounds\fP< D, N, M >::StaticGetDefaultRounds (size_t keylength)\fR [inline]\fP"

.PP
The default number of rounds for the algorithm based on key length provided by a static function\&. 
.PP
\fBParameters\fP
.RS 4
\fIkeylength\fP the size of the key, in bytes
.RE
.PP
keylength is unused in the default implementation\&. 
.SS "template<unsigned int D, unsigned int N = 1, unsigned int M = INT_MAX> void \fBVariableRounds\fP< D, N, M >::ThrowIfInvalidRounds (int rounds, const \fBAlgorithm\fP * alg)\fR [inline]\fP, \fR [protected]\fP"

.PP
Validates the number of rounds for an algorithm\&. 
.PP
\fBParameters\fP
.RS 4
\fIrounds\fP the candidate number of rounds 
.br
\fIalg\fP an \fBAlgorithm\fP object used if the number of rounds are invalid 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBInvalidRounds\fP\fP if the number of rounds are invalid
.RE
.PP
\fBThrowIfInvalidRounds()\fP validates the number of rounds and throws if invalid\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
