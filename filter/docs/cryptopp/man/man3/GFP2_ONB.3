.TH "GFP2_ONB< F >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GFP2_ONB< F > \- GF(p^2), optimal normal basis\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <xtr\&.h>\fP
.PP
Inherits \fBAbstractRing< GFP2Element >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef F \fBBaseField\fP"
.br
.in -1c

Public Types inherited from \fBAbstractRing< GFP2Element >\fP
.in +1c
.ti -1c
.RI "typedef \fBGFP2Element\fP \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBAbstractGroup< GFP2Element >\fP
.in +1c
.ti -1c
.RI "typedef \fBGFP2Element\fP \fBElement\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGFP2_ONB\fP (const \fBInteger\fP &p)"
.br
.ti -1c
.RI "const \fBInteger\fP & \fBGetModulus\fP () const"
.br
.ti -1c
.RI "\fBGFP2Element\fP \fBConvertIn\fP (const \fBInteger\fP &a) const"
.br
.ti -1c
.RI "\fBGFP2Element\fP \fBConvertIn\fP (const \fBGFP2Element\fP &a) const"
.br
.ti -1c
.RI "\fBGFP2Element\fP \fBConvertOut\fP (const \fBGFP2Element\fP &a) const"
.br
.ti -1c
.RI "bool \fBEqual\fP (const \fBGFP2Element\fP &a, const \fBGFP2Element\fP &b) const"
.br
.RI "Compare two elements for equality\&. "
.ti -1c
.RI "const \fBElement\fP & \fBIdentity\fP () const"
.br
.RI "Provides the Identity element\&. "
.ti -1c
.RI "const \fBElement\fP & \fBAdd\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.RI "Adds elements in the group\&. "
.ti -1c
.RI "const \fBElement\fP & \fBInverse\fP (const \fBElement\fP &a) const"
.br
.RI "Inverts the element in the group\&. "
.ti -1c
.RI "const \fBElement\fP & \fBDouble\fP (const \fBElement\fP &a) const"
.br
.RI "Doubles an element in the group\&. "
.ti -1c
.RI "const \fBElement\fP & \fBSubtract\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.RI "Subtracts elements in the group\&. "
.ti -1c
.RI "\fBElement\fP & \fBAccumulate\fP (\fBElement\fP &a, const \fBElement\fP &b) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "\fBElement\fP & \fBReduce\fP (\fBElement\fP &a, const \fBElement\fP &b) const"
.br
.RI "Reduces an element in the congruence class\&. "
.ti -1c
.RI "bool \fBIsUnit\fP (const \fBElement\fP &a) const"
.br
.RI "Determines whether an element is a unit in the group\&. "
.ti -1c
.RI "const \fBElement\fP & \fBMultiplicativeIdentity\fP () const"
.br
.RI "Retrieves the multiplicative identity\&. "
.ti -1c
.RI "const \fBElement\fP & \fBMultiply\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.RI "Multiplies elements in the group\&. "
.ti -1c
.RI "const \fBElement\fP & \fBMultiplicativeInverse\fP (const \fBElement\fP &a) const"
.br
.RI "Calculate the multiplicative inverse of an element in the group\&. "
.ti -1c
.RI "const \fBElement\fP & \fBSquare\fP (const \fBElement\fP &a) const"
.br
.RI "\fBSquare\fP an element in the group\&. "
.ti -1c
.RI "\fBElement\fP \fBExponentiate\fP (const \fBElement\fP &a, const \fBInteger\fP &e) const"
.br
.RI "Raises a base to an exponent in the group\&. "
.ti -1c
.RI "const \fBElement\fP & \fBPthPower\fP (const \fBElement\fP &a) const"
.br
.ti -1c
.RI "void \fBRaiseToPthPower\fP (\fBElement\fP &a) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBSpecialOperation1\fP (const \fBElement\fP &a) const"
.br
.ti -1c
.RI "const \fBElement\fP & \fBSpecialOperation2\fP (const \fBElement\fP &x, const \fBElement\fP &y, const \fBElement\fP &z) const"
.br
.in -1c

Public Member Functions inherited from \fBAbstractRing< GFP2Element >\fP
.in +1c
.ti -1c
.RI "\fBAbstractRing\fP ()"
.br
.RI "Construct an \fBAbstractRing\fP\&. "
.ti -1c
.RI "\fBAbstractRing\fP & \fBoperator=\fP (const \fBAbstractRing\fP &source)"
.br
.RI "Assign an \fBAbstractRing\fP\&. "
.ti -1c
.RI "virtual const \fBElement\fP & \fBDivide\fP (const \fBElement\fP &a, const \fBElement\fP &b) const"
.br
.RI "Divides elements in the group\&. "
.ti -1c
.RI "virtual \fBElement\fP \fBCascadeExponentiate\fP (const \fBElement\fP &x, const \fBInteger\fP &e1, const \fBElement\fP &y, const \fBInteger\fP &e2) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual void \fBSimultaneousExponentiate\fP (\fBElement\fP *results, const \fBElement\fP &base, const \fBInteger\fP *exponents, unsigned int exponentsCount) const"
.br
.RI "Exponentiates a base to multiple exponents in the Ring\&. "
.ti -1c
.RI "virtual const \fBAbstractGroup\fP< \fBGFP2Element\fP > & \fBMultiplicativeGroup\fP () const"
.br
.RI "Retrieves the multiplicative group\&. "
.in -1c

Public Member Functions inherited from \fBAbstractGroup< GFP2Element >\fP
.in +1c
.ti -1c
.RI "virtual bool \fBInversionIsFast\fP () const"
.br
.RI "Determine if inversion is fast\&. "
.ti -1c
.RI "virtual \fBElement\fP \fBScalarMultiply\fP (const \fBElement\fP &a, const \fBInteger\fP &e) const"
.br
.RI "Performs a scalar multiplication\&. "
.ti -1c
.RI "virtual \fBElement\fP \fBCascadeScalarMultiply\fP (const \fBElement\fP &x, const \fBInteger\fP &e1, const \fBElement\fP &y, const \fBInteger\fP &e2) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual void \fBSimultaneousMultiply\fP (\fBElement\fP *results, const \fBElement\fP &base, const \fBInteger\fP *exponents, unsigned int exponentsCount) const"
.br
.RI "Multiplies a base to multiple exponents in a group\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "BaseField \fBmodp\fP"
.br
.ti -1c
.RI "\fBGFP2Element\fP \fBresult\fP"
.br
.ti -1c
.RI "\fBInteger\fP \fBt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class F>
.br
class GFP2_ONB< F >"GF(p^2), optimal normal basis\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<class F> \fBElement\fP & \fBGFP2_ONB\fP< F >::Accumulate (\fBElement\fP & a, const \fBElement\fP & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
TODO\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
TODO 
.RE
.PP

.PP
Reimplemented from \fBAbstractGroup< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >::Add (const \fBElement\fP & a, const \fBElement\fP & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Adds elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
the sum of \fRa\fP and \fRb\fP 
.RE
.PP

.PP
Implements \fBAbstractGroup< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >::Double (const \fBElement\fP & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Doubles an element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP
\fBReturns\fP
.RS 4
the element doubled 
.RE
.PP

.PP
Reimplemented from \fBAbstractGroup< GFP2Element >\fP\&.
.SS "template<class F> bool \fBGFP2_ONB\fP< F >::Equal (const \fBGFP2Element\fP & a, const \fBGFP2Element\fP & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Compare two elements for equality\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
true if the elements are equal, false otherwise
.RE
.PP
\fBEqual()\fP tests the elements for equality using \fRa==b\fP 
.PP
Implements \fBAbstractGroup< GFP2Element >\fP\&.
.SS "template<class F> \fBElement\fP \fBGFP2_ONB\fP< F >::Exponentiate (const \fBElement\fP & a, const \fBInteger\fP & e) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Raises a base to an exponent in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the base 
.br
\fIe\fP the exponent 
.RE
.PP
\fBReturns\fP
.RS 4
the exponentiation 
.RE
.PP

.PP
Reimplemented from \fBAbstractRing< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >::Identity () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Provides the Identity element\&. 
.PP
\fBReturns\fP
.RS 4
the Identity element 
.RE
.PP

.PP
Implements \fBAbstractGroup< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >::Inverse (const \fBElement\fP & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Inverts the element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.RE
.PP
\fBReturns\fP
.RS 4
the inverse of the element 
.RE
.PP

.PP
Implements \fBAbstractGroup< GFP2Element >\fP\&.
.SS "template<class F> bool \fBGFP2_ONB\fP< F >::IsUnit (const \fBElement\fP & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determines whether an element is a unit in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP
\fBReturns\fP
.RS 4
true if the element is a unit after reduction, false otherwise\&. 
.RE
.PP

.PP
Implements \fBAbstractRing< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >::MultiplicativeIdentity () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Retrieves the multiplicative identity\&. 
.PP
\fBReturns\fP
.RS 4
the multiplicative identity 
.RE
.PP

.PP
Implements \fBAbstractRing< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >::MultiplicativeInverse (const \fBElement\fP & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Calculate the multiplicative inverse of an element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP

.PP
Implements \fBAbstractRing< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >::Multiply (const \fBElement\fP & a, const \fBElement\fP & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Multiplies elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the multiplicand 
.br
\fIb\fP the multiplier 
.RE
.PP
\fBReturns\fP
.RS 4
the product of a and b 
.RE
.PP

.PP
Implements \fBAbstractRing< GFP2Element >\fP\&.
.SS "template<class F> \fBElement\fP & \fBGFP2_ONB\fP< F >::Reduce (\fBElement\fP & a, const \fBElement\fP & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reduces an element in the congruence class\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP element to reduce 
.br
\fIb\fP the congruence class 
.RE
.PP
\fBReturns\fP
.RS 4
the reduced element 
.RE
.PP

.PP
Reimplemented from \fBAbstractGroup< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >\fB::Square\fP (const \fBElement\fP & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
\fBSquare\fP an element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP
\fBReturns\fP
.RS 4
the element squared 
.RE
.PP

.PP
Reimplemented from \fBAbstractRing< GFP2Element >\fP\&.
.SS "template<class F> const \fBElement\fP & \fBGFP2_ONB\fP< F >::Subtract (const \fBElement\fP & a, const \fBElement\fP & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Subtracts elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
the difference of \fRa\fP and \fRb\fP\&. The element \fRa\fP must provide a Subtract member function\&. 
.RE
.PP

.PP
Reimplemented from \fBAbstractGroup< GFP2Element >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
