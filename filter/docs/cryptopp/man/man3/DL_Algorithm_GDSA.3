.TH "DL_Algorithm_GDSA< T >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DL_Algorithm_GDSA< T > \- \fBGDSA\fP algorithm\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <gfpcrypt\&.h>\fP
.PP
Inherits \fBDL_ElgamalLikeSignatureAlgorithm< T >\fP\&.
.PP
Inherited by \fBDL_Algorithm_DSA_RFC6979< T, H >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "CRYPTOPP_STATIC_CONSTEXPR const char *CRYPTOPP_API \fBStaticAlgorithmName\fP ()"
.br
.ti -1c
.RI "void \fBSign\fP (const \fBDL_GroupParameters\fP< T > &params, const \fBInteger\fP &x, const \fBInteger\fP &k, const \fBInteger\fP &e, \fBInteger\fP &r, \fBInteger\fP &s) const"
.br
.RI "Sign a message using a private key\&. "
.ti -1c
.RI "bool \fBVerify\fP (const \fBDL_GroupParameters\fP< T > &params, const \fBDL_PublicKey\fP< T > &publicKey, const \fBInteger\fP &e, const \fBInteger\fP &r, const \fBInteger\fP &s) const"
.br
.RI "Verify a message using a public key\&. "
.in -1c

Public Member Functions inherited from \fBDL_ElgamalLikeSignatureAlgorithm< T >\fP
.in +1c
.ti -1c
.RI "virtual \fBInteger\fP \fBRecoverPresignature\fP (const \fBDL_GroupParameters\fP< T > &params, const \fBDL_PublicKey\fP< T > &publicKey, const \fBInteger\fP &r, const \fBInteger\fP &s) const"
.br
.RI "Recover a Presignature\&. "
.ti -1c
.RI "virtual size_t \fBRLen\fP (const \fBDL_GroupParameters\fP< T > &params) const"
.br
.RI "Retrieve R length\&. "
.ti -1c
.RI "virtual size_t \fBSLen\fP (const \fBDL_GroupParameters\fP< T > &params) const"
.br
.RI "Retrieve S length\&. "
.ti -1c
.RI "virtual bool \fBIsDeterministic\fP () const"
.br
.RI "Signature scheme flag\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T>
.br
class DL_Algorithm_GDSA< T >"\fBGDSA\fP algorithm\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP FieldElement type or class
.RE
.PP
FieldElement \fRT\fP can be \fBInteger\fP, \fBECP\fP or \fBEC2N\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<class T> void \fBDL_Algorithm_GDSA\fP< T >::Sign (const \fBDL_GroupParameters\fP< T > & params, const \fBInteger\fP & privateKey, const \fBInteger\fP & k, const \fBInteger\fP & e, \fBInteger\fP & r, \fBInteger\fP & s) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Sign a message using a private key\&. 
.PP
\fBParameters\fP
.RS 4
\fIparams\fP GroupParameters 
.br
\fIprivateKey\fP private key 
.br
\fIk\fP signing exponent 
.br
\fIe\fP encoded message 
.br
\fIr\fP r part of signature 
.br
\fIs\fP s part of signature 
.RE
.PP

.PP
Implements \fBDL_ElgamalLikeSignatureAlgorithm< T >\fP\&.
.SS "template<class T> bool \fBDL_Algorithm_GDSA\fP< T >::Verify (const \fBDL_GroupParameters\fP< T > & params, const \fBDL_PublicKey\fP< T > & publicKey, const \fBInteger\fP & e, const \fBInteger\fP & r, const \fBInteger\fP & s) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Verify a message using a public key\&. 
.PP
\fBParameters\fP
.RS 4
\fIparams\fP GroupParameters 
.br
\fIpublicKey\fP public key 
.br
\fIe\fP encoded message 
.br
\fIr\fP r part of signature 
.br
\fIs\fP s part of signature 
.RE
.PP

.PP
Implements \fBDL_ElgamalLikeSignatureAlgorithm< T >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
