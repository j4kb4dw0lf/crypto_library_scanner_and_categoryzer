.TH "/home/mock/cryptopp-master/siphash.h" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/mock/cryptopp-master/siphash.h \- Classes for \fBSipHash\fP message authentication code\&.

.SH SYNOPSIS
.br
.PP
\fR#include 'cryptlib\&.h'\fP
.br
\fR#include 'secblock\&.h'\fP
.br
\fR#include 'seckey\&.h'\fP
.br
\fR#include 'misc\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBSipHash_Info< T_128bit >\fP"
.br
.RI "\fBSipHash\fP message authentication code information\&. "
.ti -1c
.RI "class \fBSipHash_Base< C, D, T_128bit >\fP"
.br
.RI "\fBSipHash\fP message authentication code base class\&. "
.ti -1c
.RI "class \fBSipHash< C, D, T_128bit >\fP"
.br
.RI "\fBSipHash\fP message authentication code\&. "
.in -1c
.SH "Detailed Description"
.PP
Classes for \fBSipHash\fP message authentication code\&.

\fBSipHash\fP computes a 64-bit or 128-bit message authentication code from a variable-length message and 128-bit secret key\&. It was designed to be efficient even for short inputs, with performance comparable to non-cryptographic hash functions\&.

.PP
To create a SipHash-2-4 object with a 64-bit MAC use code similar to the following\&.
.PP
.nf
  SecByteBlock key(16);
  prng\&.GenerateBlock(key, key\&.size());

  \fBSipHash<2,4,false>\fP hash(key, key\&.size());
  hash\&.Update(\&.\&.\&.);
  hash\&.Final(\&.\&.\&.);
.fi
.PP

.PP
To create a SipHash-2-4 object with a 128-bit MAC use code similar to the following\&.
.PP
.nf
  SecByteBlock key(16);
  prng\&.GenerateBlock(key, key\&.size());

  \fBSipHash<2,4,true>\fP hash(key, key\&.size());
  hash\&.Update(\&.\&.\&.);
  hash\&.Final(\&.\&.\&.);
.fi
.PP

.PP
\fBSee also\fP
.RS 4
Jean-Philippe Aumasson and Daniel J\&. Bernstein \fRSipHash: a fast short-input PRF\fP
.RE
.PP
\fBSince\fP
.RS 4
Crypto++ 6\&.0
.RE
.PP

.SH "Author"
.PP
Generated automatically by Doxygen for My Project from the source code\&.
