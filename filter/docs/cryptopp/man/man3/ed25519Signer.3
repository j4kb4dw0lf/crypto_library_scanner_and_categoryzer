.TH "ed25519Signer" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ed25519Signer \- Ed25519 signature algorithm\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <xed25519\&.h>\fP
.PP
Inherits \fBPK_Signer\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBInteger\fP \fBElement\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (SECRET_KEYLENGTH=32)"
.br
.RI "Size of the private key\&. "
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (PUBLIC_KEYLENGTH=32)"
.br
.RI "Size of the public key\&. "
.ti -1c
.RI "\fBCRYPTOPP_CONSTANT\fP (SIGNATURE_LENGTH=64)"
.br
.RI "Size of the signature\&. "
.ti -1c
.RI "\fBed25519Signer\fP ()"
.br
.RI "Create an \fBed25519Signer\fP object\&. "
.ti -1c
.RI "\fBed25519Signer\fP (const \fBbyte\fP y[PUBLIC_KEYLENGTH], const \fBbyte\fP x[SECRET_KEYLENGTH])"
.br
.RI "Create an \fBed25519Signer\fP object\&. "
.ti -1c
.RI "\fBed25519Signer\fP (const \fBbyte\fP x[SECRET_KEYLENGTH])"
.br
.RI "Create an \fBed25519Signer\fP object\&. "
.ti -1c
.RI "\fBed25519Signer\fP (const \fBInteger\fP &y, const \fBInteger\fP &x)"
.br
.RI "Create an \fBed25519Signer\fP object\&. "
.ti -1c
.RI "\fBed25519Signer\fP (const \fBInteger\fP &x)"
.br
.RI "Create an \fBed25519Signer\fP object\&. "
.ti -1c
.RI "\fBed25519Signer\fP (const \fBPKCS8PrivateKey\fP &key)"
.br
.RI "Create an \fBed25519Signer\fP object\&. "
.ti -1c
.RI "\fBed25519Signer\fP (\fBRandomNumberGenerator\fP &rng)"
.br
.RI "Create an \fBed25519Signer\fP object\&. "
.ti -1c
.RI "\fBed25519Signer\fP (\fBBufferedTransformation\fP &params)"
.br
.RI "Create an \fBed25519Signer\fP object\&. "
.ti -1c
.RI "\fBPrivateKey\fP & \fBAccessKey\fP ()"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "\fBPrivateKey\fP & \fBAccessPrivateKey\fP ()"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "const \fBPrivateKey\fP & \fBGetKey\fP () const"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "const \fBPrivateKey\fP & \fBGetPrivateKey\fP () const"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "size_t \fBSignatureLength\fP () const"
.br
.RI "Provides the signature length if it only depends on the key\&. "
.ti -1c
.RI "size_t \fBMaxRecoverableLength\fP () const"
.br
.RI "Provides the length of longest message that can be recovered\&. "
.ti -1c
.RI "size_t \fBMaxRecoverableLengthFromSignatureLength\fP (size_t signatureLength) const"
.br
.RI "Provides the length of longest message that can be recovered from a signature of given length\&. "
.ti -1c
.RI "bool \fBIsProbabilistic\fP () const"
.br
.RI "Determines whether a signature scheme requires a random number generator\&. "
.ti -1c
.RI "bool \fBAllowNonrecoverablePart\fP () const"
.br
.RI "Determines whether the non-recoverable message part can be signed\&. "
.ti -1c
.RI "bool \fBRecoverablePartFirst\fP () const"
.br
.RI "Determines whether the recoverable part must be input before the non-recoverable part\&. "
.ti -1c
.RI "\fBPK_MessageAccumulator\fP * \fBNewSignatureAccumulator\fP (\fBRandomNumberGenerator\fP &rng) const"
.br
.RI "Create a new \fBHashTransformation\fP to accumulate the message to be signed\&. "
.ti -1c
.RI "void \fBInputRecoverableMessage\fP (\fBPK_MessageAccumulator\fP &messageAccumulator, const \fBbyte\fP *recoverableMessage, size_t recoverableMessageLength) const"
.br
.RI "Input a recoverable message to an accumulator\&. "
.ti -1c
.RI "size_t \fBSignAndRestart\fP (\fBRandomNumberGenerator\fP &rng, \fBPK_MessageAccumulator\fP &messageAccumulator, \fBbyte\fP *signature, bool restart) const"
.br
.RI "Sign and restart messageAccumulator\&. "
.ti -1c
.RI "size_t \fBSignStream\fP (\fBRandomNumberGenerator\fP &rng, std::istream &stream, \fBbyte\fP *signature) const"
.br
.RI "Sign a stream\&. "
.in -1c

Public Member Functions inherited from \fBPK_Signer\fP
.in +1c
.ti -1c
.RI "virtual size_t \fBSign\fP (\fBRandomNumberGenerator\fP &rng, \fBPK_MessageAccumulator\fP *messageAccumulator, \fBbyte\fP *signature) const"
.br
.RI "Sign and delete the messageAccumulator\&. "
.ti -1c
.RI "virtual size_t \fBSignMessage\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *message, size_t messageLen, \fBbyte\fP *signature) const"
.br
.RI "Sign a message\&. "
.ti -1c
.RI "virtual size_t \fBSignMessageWithRecovery\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *recoverableMessage, size_t recoverableMessageLength, const \fBbyte\fP *nonrecoverableMessage, size_t nonrecoverableMessageLength, \fBbyte\fP *signature) const"
.br
.RI "Sign a recoverable message\&. "
.in -1c

Public Member Functions inherited from \fBPK_SignatureScheme\fP
.in +1c
.ti -1c
.RI "virtual size_t \fBMaxSignatureLength\fP (size_t recoverablePartLength=0) const"
.br
.RI "Provides the maximum signature length produced given the length of the recoverable message part\&. "
.ti -1c
.RI "virtual bool \fBSignatureUpfront\fP () const"
.br
.RI "Determines whether the signature must be input before the message\&. "
.in -1c

Public Member Functions inherited from \fBPrivateKeyAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBCryptoMaterial\fP & \fBAccessMaterial\fP ()"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "const \fBCryptoMaterial\fP & \fBGetMaterial\fP () const"
.br
.RI "Retrieves a reference to a Private Key\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBed25519PrivateKey\fP \fBm_key\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Ed25519 signature algorithm\&. 


.PP
\fBSince\fP
.RS 4
Crypto++ 8\&.0 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "ed25519Signer::ed25519Signer (const \fBbyte\fP y[PUBLIC_KEYLENGTH], const \fBbyte\fP x[SECRET_KEYLENGTH])"

.PP
Create an \fBed25519Signer\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIy\fP public key 
.br
\fIx\fP private key
.RE
.PP
This constructor creates an \fBed25519Signer\fP object using existing parameters\&. 
.PP
\fBNote\fP
.RS 4
The public key is not validated\&. 
.RE
.PP

.SS "ed25519Signer::ed25519Signer (const \fBbyte\fP x[SECRET_KEYLENGTH])"

.PP
Create an \fBed25519Signer\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP private key
.RE
.PP
This constructor creates an \fBed25519Signer\fP object using existing parameters\&. The public key is calculated from the private key\&. 
.SS "ed25519Signer::ed25519Signer (const \fBInteger\fP & y, const \fBInteger\fP & x)"

.PP
Create an \fBed25519Signer\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIy\fP public key 
.br
\fIx\fP private key
.RE
.PP
This constructor creates an \fBed25519Signer\fP object using existing parameters\&. 
.PP
\fBNote\fP
.RS 4
The public key is not validated\&. 
.RE
.PP

.SS "ed25519Signer::ed25519Signer (const \fBInteger\fP & x)"

.PP
Create an \fBed25519Signer\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP private key
.RE
.PP
This constructor creates an \fBed25519Signer\fP object using existing parameters\&. The public key is calculated from the private key\&. 
.SS "ed25519Signer::ed25519Signer (const \fBPKCS8PrivateKey\fP & key)"

.PP
Create an \fBed25519Signer\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP PKCS8 private key
.RE
.PP
This constructor creates an \fBed25519Signer\fP object using existing private key\&. 
.PP
\fBNote\fP
.RS 4
The keys are not validated\&. 
.RE
.PP
\fBSince\fP
.RS 4
Crypto++ 8\&.6 
.RE
.PP

.SS "ed25519Signer::ed25519Signer (\fBRandomNumberGenerator\fP & rng)"

.PP
Create an \fBed25519Signer\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP \fBRandomNumberGenerator\fP derived class
.RE
.PP
This constructor creates a new \fBed25519Signer\fP using the random number generator\&. 
.SS "ed25519Signer::ed25519Signer (\fBBufferedTransformation\fP & params)"

.PP
Create an \fBed25519Signer\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIparams\fP public and private key
.RE
.PP
This constructor creates an \fBed25519Signer\fP object using existing parameters\&. The \fRparams\fP can be created with \fRSave\fP\&. 
.PP
\fBNote\fP
.RS 4
The public key is not validated\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBPrivateKey\fP & ed25519Signer::AccessKey ()\fR [inline]\fP"

.PP
Retrieves a reference to a Private Key\&. \fBAccessKey()\fP retrieves a non-const reference to a private key\&. 
.SS "\fBPrivateKey\fP & ed25519Signer::AccessPrivateKey ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Retrieves a reference to a Private Key\&. 
.PP
\fBReturns\fP
.RS 4
a reference the private key 
.RE
.PP

.PP
Implements \fBPrivateKeyAlgorithm\fP\&.
.SS "bool ed25519Signer::AllowNonrecoverablePart () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determines whether the non-recoverable message part can be signed\&. 
.PP
\fBReturns\fP
.RS 4
true if the non-recoverable message part can be signed 
.RE
.PP

.PP
Implements \fBPK_SignatureScheme\fP\&.
.SS "ed25519Signer::CRYPTOPP_CONSTANT (PUBLIC_KEYLENGTH  = \fR32\fP)"

.PP
Size of the public key\&. PUBLIC_KEYLENGTH is the size of the public key, in bytes\&. 
.SS "ed25519Signer::CRYPTOPP_CONSTANT (SECRET_KEYLENGTH  = \fR32\fP)"

.PP
Size of the private key\&. SECRET_KEYLENGTH is the size of the private key, in bytes\&. 
.SS "ed25519Signer::CRYPTOPP_CONSTANT (SIGNATURE_LENGTH  = \fR64\fP)"

.PP
Size of the signature\&. SIGNATURE_LENGTH is the size of the signature, in bytes\&. \fBed25519\fP is a DL-based signature scheme\&. The signature is the concatenation of \fRr || s\fP\&. 
.SS "const \fBPrivateKey\fP & ed25519Signer::GetKey () const\fR [inline]\fP"

.PP
Retrieves a reference to a Private Key\&. \fBAccessKey()\fP retrieves a const reference to a private key\&. 
.SS "const \fBPrivateKey\fP & ed25519Signer::GetPrivateKey () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Retrieves a reference to a Private Key\&. 
.PP
\fBReturns\fP
.RS 4
a const reference the private key 
.RE
.PP

.PP
Reimplemented from \fBPrivateKeyAlgorithm\fP\&.
.SS "void ed25519Signer::InputRecoverableMessage (\fBPK_MessageAccumulator\fP & messageAccumulator, const \fBbyte\fP * recoverableMessage, size_t recoverableMessageLength) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Input a recoverable message to an accumulator\&. 
.PP
\fBParameters\fP
.RS 4
\fImessageAccumulator\fP a reference to a \fBPK_MessageAccumulator\fP 
.br
\fIrecoverableMessage\fP a pointer to the recoverable message part to be signed 
.br
\fIrecoverableMessageLength\fP the size of the recoverable message part 
.RE
.PP

.PP
Implements \fBPK_Signer\fP\&.
.SS "bool ed25519Signer::IsProbabilistic () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determines whether a signature scheme requires a random number generator\&. 
.PP
\fBReturns\fP
.RS 4
true if the signature scheme requires a \fBRandomNumberGenerator()\fP to sign
.RE
.PP
if \fBIsProbabilistic()\fP returns false, then \fBNullRNG()\fP can be passed to functions that take \fBRandomNumberGenerator()\fP\&. 
.PP
Implements \fBPK_SignatureScheme\fP\&.
.SS "size_t ed25519Signer::MaxRecoverableLength () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Provides the length of longest message that can be recovered\&. 
.PP
\fBReturns\fP
.RS 4
the length of longest message that can be recovered, in bytes
.RE
.PP
\fBMaxRecoverableLength()\fP returns the length of longest message that can be recovered, or 0 if this signature scheme does not support message recovery\&. 
.PP
Implements \fBPK_SignatureScheme\fP\&.
.SS "size_t ed25519Signer::MaxRecoverableLengthFromSignatureLength (size_t signatureLength) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Provides the length of longest message that can be recovered from a signature of given length\&. 
.PP
\fBParameters\fP
.RS 4
\fIsignatureLength\fP the length of the signature, in bytes 
.RE
.PP
\fBReturns\fP
.RS 4
the length of longest message that can be recovered from a signature of given length, in bytes
.RE
.PP
\fBMaxRecoverableLengthFromSignatureLength()\fP returns the length of longest message that can be recovered from a signature of given length, or 0 if this signature scheme does not support message recovery\&. 
.PP
Implements \fBPK_SignatureScheme\fP\&.
.SS "\fBPK_MessageAccumulator\fP * ed25519Signer::NewSignatureAccumulator (\fBRandomNumberGenerator\fP & rng) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Create a new \fBHashTransformation\fP to accumulate the message to be signed\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.RE
.PP
\fBReturns\fP
.RS 4
a pointer to a \fBPK_MessageAccumulator\fP
.RE
.PP
\fBNewSignatureAccumulator()\fP can be used with all signing methods\&. \fBSign()\fP will automatically delete the accumulator pointer\&. The caller is responsible for deletion if a method is called that takes a reference\&. 
.PP
Implements \fBPK_Signer\fP\&.
.SS "bool ed25519Signer::RecoverablePartFirst () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determines whether the recoverable part must be input before the non-recoverable part\&. 
.PP
\fBReturns\fP
.RS 4
true if the recoverable part must be input before the non-recoverable part during signing
.RE
.PP
\fBRecoverablePartFirst()\fP determines whether you must input the recoverable part before the non-recoverable part during signing 
.PP
Implements \fBPK_SignatureScheme\fP\&.
.SS "size_t ed25519Signer::SignAndRestart (\fBRandomNumberGenerator\fP & rng, \fBPK_MessageAccumulator\fP & messageAccumulator, \fBbyte\fP * signature, bool restart) const\fR [virtual]\fP"

.PP
Sign and restart messageAccumulator\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fImessageAccumulator\fP a pointer to a \fBPK_MessageAccumulator\fP derived class 
.br
\fIsignature\fP a block of bytes for the signature 
.br
\fIrestart\fP flag indicating whether the messageAccumulator should be restarted 
.RE
.PP
\fBReturns\fP
.RS 4
actual signature length 
.RE
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(signature) == \fBMaxSignatureLength()\fP\fP 
.RE
.PP

.PP
Implements \fBPK_Signer\fP\&.
.SS "size_t ed25519Signer::SignatureLength () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Provides the signature length if it only depends on the key\&. 
.PP
\fBReturns\fP
.RS 4
the signature length if it only depends on the key, in bytes
.RE
.PP
\fBSignatureLength()\fP returns the signature length if it only depends on the key, otherwise 0\&. 
.PP
Implements \fBPK_SignatureScheme\fP\&.
.SS "size_t ed25519Signer::SignStream (\fBRandomNumberGenerator\fP & rng, std::istream & stream, \fBbyte\fP * signature) const"

.PP
Sign a stream\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIstream\fP an std::istream derived class 
.br
\fIsignature\fP a block of bytes for the signature 
.RE
.PP
\fBReturns\fP
.RS 4
actual signature length
.RE
.PP
\fBSignStream()\fP handles large streams\&. The Stream functions were added to \fBed25519\fP for signing and verifying files that are too large for a memory allocation\&. The functions are not present in other library signers and verifiers\&.

.PP
\fBed25519\fP is a deterministic signature scheme\&. \fR\fBIsProbabilistic()\fP\fP returns false and the random number generator can be \fR\fBNullRNG()\fP\fP\&. 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(signature) == \fBMaxSignatureLength()\fP\fP 
.RE
.PP
\fBSince\fP
.RS 4
Crypto++ 8\&.1 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
