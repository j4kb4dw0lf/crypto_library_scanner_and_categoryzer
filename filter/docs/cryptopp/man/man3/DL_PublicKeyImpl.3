.TH "DL_PublicKeyImpl< GP >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DL_PublicKeyImpl< GP > \- Discrete Log (DL) public key base implementation\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <pubkey\&.h>\fP
.PP
Inherits \fBDL_PublicKey< GP::Element >\fP, and \fBDL_KeyImpl< X509PublicKey, GP >\fP\&.
.PP
Inherited by \fBDL_PublicKey_GFP< GroupParameters >\fP, \fBDL_PublicKey_GFP< DL_GroupParameters_DSA >\fP, and \fBDL_PublicKey_GFP< GP >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef GP::Element \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBDL_PublicKey< GP::Element >\fP
.in +1c
.ti -1c
.RI "typedef GP::Element \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBDL_KeyImpl< X509PublicKey, GP >\fP
.in +1c
.ti -1c
.RI "typedef GP \fBGroupParameters\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBValidate\fP (\fBRandomNumberGenerator\fP &rng, unsigned int level) const"
.br
.RI "Check this object for errors\&. "
.ti -1c
.RI "bool \fBGetVoidValue\fP (const char *name, const std::type_info &valueType, void *pValue) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "void \fBAssignFrom\fP (const \fBNameValuePairs\fP &source)"
.br
.RI "Assign values to this object\&. "
.ti -1c
.RI "bool \fBSupportsPrecomputation\fP () const"
.br
.RI "Determines whether the object supports precomputation\&. "
.ti -1c
.RI "void \fBPrecompute\fP (unsigned int precomputationStorage=16)"
.br
.RI "Perform precomputation\&. "
.ti -1c
.RI "void \fBLoadPrecomputation\fP (\fBBufferedTransformation\fP &storedPrecomputation)"
.br
.RI "Retrieve previously saved precomputation\&. "
.ti -1c
.RI "void \fBSavePrecomputation\fP (\fBBufferedTransformation\fP &storedPrecomputation) const"
.br
.RI "Save precomputation for later use\&. "
.ti -1c
.RI "const \fBDL_GroupParameters\fP< Element > & \fBGetAbstractGroupParameters\fP () const"
.br
.RI "Retrieves abstract group parameters\&. "
.ti -1c
.RI "\fBDL_GroupParameters\fP< Element > & \fBAccessAbstractGroupParameters\fP ()"
.br
.RI "Retrieves abstract group parameters\&. "
.ti -1c
.RI "const \fBDL_FixedBasePrecomputation\fP< Element > & \fBGetPublicPrecomputation\fP () const"
.br
.RI "Accesses the public precomputation\&. "
.ti -1c
.RI "\fBDL_FixedBasePrecomputation\fP< Element > & \fBAccessPublicPrecomputation\fP ()"
.br
.RI "Accesses the public precomputation\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBDL_PublicKeyImpl\fP< GP > &rhs) const"
.br
.in -1c

Public Member Functions inherited from \fBDL_PublicKey< GP::Element >\fP
.in +1c
.ti -1c
.RI "bool \fBGetVoidValue\fP (const char *name, const std::type_info &valueType, void *pValue) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "void \fBAssignFrom\fP (const \fBNameValuePairs\fP &source)"
.br
.RI "Initialize or reinitialize this key\&. "
.ti -1c
.RI "virtual const Element & \fBGetPublicElement\fP () const"
.br
.RI "Retrieves the public element\&. "
.ti -1c
.RI "virtual void \fBSetPublicElement\fP (const Element &y)"
.br
.RI "Sets the public element\&. "
.ti -1c
.RI "virtual Element \fBExponentiatePublicElement\fP (const \fBInteger\fP &exponent) const"
.br
.RI "Exponentiates this element\&. "
.ti -1c
.RI "virtual Element \fBCascadeExponentiateBaseAndPublicElement\fP (const \fBInteger\fP &baseExp, const \fBInteger\fP &publicExp) const"
.br
.RI "Exponentiates an element\&. "
.in -1c

Public Member Functions inherited from \fBDL_KeyImpl< X509PublicKey, GP >\fP
.in +1c
.ti -1c
.RI "\fBOID\fP \fBGetAlgorithmID\fP () const"
.br
.ti -1c
.RI "bool \fBBERDecodeAlgorithmParameters\fP (\fBBufferedTransformation\fP &bt)"
.br
.ti -1c
.RI "bool \fBDEREncodeAlgorithmParameters\fP (\fBBufferedTransformation\fP &bt) const"
.br
.ti -1c
.RI "const GP & \fBGetGroupParameters\fP () const"
.br
.ti -1c
.RI "GP & \fBAccessGroupParameters\fP ()"
.br
.in -1c

Public Member Functions inherited from \fBX509PublicKey\fP
.in +1c
.ti -1c
.RI "void \fBBERDecode\fP (\fBBufferedTransformation\fP &bt)"
.br
.RI "Decode this object from a \fBBufferedTransformation\fP\&. "
.ti -1c
.RI "void \fBDEREncode\fP (\fBBufferedTransformation\fP &bt) const"
.br
.RI "Encode this object into a \fBBufferedTransformation\fP\&. "
.ti -1c
.RI "virtual void \fBBERDecodePublicKey\fP (\fBBufferedTransformation\fP &bt, bool parametersPresent, size_t size)=0"
.br
.RI "Decode subjectPublicKey part of subjectPublicKeyInfo\&. "
.ti -1c
.RI "virtual void \fBDEREncodePublicKey\fP (\fBBufferedTransformation\fP &bt) const =0"
.br
.RI "Encode subjectPublicKey part of subjectPublicKeyInfo\&. "
.in -1c

Public Member Functions inherited from \fBASN1CryptoMaterial< PublicKey >\fP
.in +1c
.ti -1c
.RI "void \fBSave\fP (\fBBufferedTransformation\fP &bt) const"
.br
.RI "DER encode ASN\&.1 object\&. "
.ti -1c
.RI "void \fBLoad\fP (\fBBufferedTransformation\fP &bt)"
.br
.RI "BER decode ASN\&.1 object\&. "
.in -1c

Public Member Functions inherited from \fBASN1Object\fP
.in +1c
.ti -1c
.RI "virtual void \fBBEREncode\fP (\fBBufferedTransformation\fP &bt) const"
.br
.RI "Encode this object into a \fBBufferedTransformation\fP\&. "
.in -1c

Public Member Functions inherited from \fBCryptoMaterial\fP
.in +1c
.ti -1c
.RI "virtual void \fBThrowIfInvalid\fP (\fBRandomNumberGenerator\fP &rng, unsigned int level) const"
.br
.RI "Check this object for errors\&. "
.ti -1c
.RI "void \fBDoQuickSanityCheck\fP () const"
.br
.RI "Perform a quick sanity check\&. "
.in -1c

Public Member Functions inherited from \fBNameValuePairs\fP
.in +1c
.ti -1c
.RI "template<class T> bool \fBGetThisObject\fP (T &object) const"
.br
.RI "Get a copy of this object or subobject\&. "
.ti -1c
.RI "template<class T> bool \fBGetThisPointer\fP (T *&ptr) const"
.br
.RI "Get a pointer to this object\&. "
.ti -1c
.RI "template<class T> bool \fBGetValue\fP (const char *name, T &value) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "template<class T> T \fBGetValueWithDefault\fP (const char *name, T defaultValue) const"
.br
.RI "Get a named value\&. "
.ti -1c
.RI "CRYPTOPP_DLL std::string \fBGetValueNames\fP () const"
.br
.RI "Get a list of value names that can be retrieved\&. "
.ti -1c
.RI "CRYPTOPP_DLL bool \fBGetIntValue\fP (const char *name, int &value) const"
.br
.RI "Get a named value with type int\&. "
.ti -1c
.RI "CRYPTOPP_DLL int \fBGetIntValueWithDefault\fP (const char *name, int defaultValue) const"
.br
.RI "Get a named value with type int, with default\&. "
.ti -1c
.RI "CRYPTOPP_DLL bool \fBGetWord64Value\fP (const char *name, word64 &value) const"
.br
.RI "Get a named value with type word64\&. "
.ti -1c
.RI "CRYPTOPP_DLL word64 \fBGetWord64ValueWithDefault\fP (const char *name, word64 defaultValue) const"
.br
.RI "Get a named value with type word64, with default\&. "
.ti -1c
.RI "template<class T> void \fBGetRequiredParameter\fP (const char *className, const char *name, T &value) const"
.br
.RI "Retrieves a required name/value pair\&. "
.ti -1c
.RI "CRYPTOPP_DLL void \fBGetRequiredIntParameter\fP (const char *className, const char *name, int &value) const"
.br
.RI "Retrieves a required name/value pair\&. "
.in -1c
.SS "Additional Inherited Members"


Static Public Member Functions inherited from \fBNameValuePairs\fP
.in +1c
.ti -1c
.RI "static CRYPTOPP_DLL void CRYPTOPP_API \fBThrowIfTypeMismatch\fP (const char *name, const std::type_info &stored, const std::type_info &retrieving)"
.br
.RI "Ensures an expected name and type is present\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class GP>
.br
class DL_PublicKeyImpl< GP >"Discrete Log (DL) public key base implementation\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIGP\fP GroupParameters class 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<class GP> \fBDL_GroupParameters\fP< Element > & \fBDL_PublicKeyImpl\fP< GP >::AccessAbstractGroupParameters ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Retrieves abstract group parameters\&. 
.PP
\fBReturns\fP
.RS 4
a non-const reference to the group parameters 
.RE
.PP

.PP
Implements \fBDL_Key< GP::Element >\fP\&.
.SS "template<class GP> \fBDL_FixedBasePrecomputation\fP< Element > & \fBDL_PublicKeyImpl\fP< GP >::AccessPublicPrecomputation ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Accesses the public precomputation\&. GetPublicPrecomputation returns a const reference, while AccessPublicPrecomputation returns a non-const reference\&. Must be overridden in derived classes\&. 
.PP
Implements \fBDL_PublicKey< GP::Element >\fP\&.
.SS "template<class GP> void \fBDL_PublicKeyImpl\fP< GP >::AssignFrom (const \fBNameValuePairs\fP & source)\fR [inline]\fP, \fR [virtual]\fP"

.PP
Assign values to this object\&. This function can be used to create a public key from a private key\&. 
.PP
Implements \fBCryptoMaterial\fP\&.
.SS "template<class GP> const \fBDL_GroupParameters\fP< Element > & \fBDL_PublicKeyImpl\fP< GP >::GetAbstractGroupParameters () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Retrieves abstract group parameters\&. 
.PP
\fBReturns\fP
.RS 4
a const reference to the group parameters 
.RE
.PP

.PP
Implements \fBDL_Key< GP::Element >\fP\&.
.SS "template<class GP> const \fBDL_FixedBasePrecomputation\fP< Element > & \fBDL_PublicKeyImpl\fP< GP >::GetPublicPrecomputation () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Accesses the public precomputation\&. GetPublicPrecomputation returns a const reference, while AccessPublicPrecomputation returns a non-const reference\&. Must be overridden in derived classes\&. 
.PP
Implements \fBDL_PublicKey< GP::Element >\fP\&.
.SS "template<class GP> bool \fBDL_PublicKeyImpl\fP< GP >::GetVoidValue (const char * name, const std::type_info & valueType, void * pValue) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Get a named value\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP the name of the object or value to retrieve 
.br
\fIvalueType\fP reference to a variable that receives the value 
.br
\fIpValue\fP void pointer to a variable that receives the value 
.RE
.PP
\fBReturns\fP
.RS 4
true if the value was retrieved, false otherwise
.RE
.PP
\fBGetVoidValue()\fP retrieves the value of name if it exists\&. 
.PP
\fBNote\fP
.RS 4
\fBGetVoidValue()\fP is an internal function and should be implemented by derived classes\&. Users should use one of the other functions instead\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBGetValue()\fP, \fBGetValueWithDefault()\fP, \fBGetIntValue()\fP, \fBGetIntValueWithDefault()\fP, \fBGetRequiredParameter()\fP and \fBGetRequiredIntParameter()\fP 
.RE
.PP

.PP
Implements \fBNameValuePairs\fP\&.
.SS "template<class GP> void \fBDL_PublicKeyImpl\fP< GP >::LoadPrecomputation (\fBBufferedTransformation\fP & storedPrecomputation)\fR [inline]\fP, \fR [virtual]\fP"

.PP
Retrieve previously saved precomputation\&. 
.PP
\fBParameters\fP
.RS 4
\fIstoredPrecomputation\fP \fBBufferedTransformation\fP with the saved precomputation 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBNotImplemented\fP\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBSupportsPrecomputation()\fP, \fBPrecompute()\fP 
.RE
.PP

.PP
Reimplemented from \fBCryptoMaterial\fP\&.
.SS "template<class GP> void \fBDL_PublicKeyImpl\fP< GP >::Precompute (unsigned int precomputationStorage = \fR16\fP)\fR [inline]\fP, \fR [virtual]\fP"

.PP
Perform precomputation\&. 
.PP
\fBParameters\fP
.RS 4
\fIprecomputationStorage\fP the suggested number of objects for the precompute table 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBNotImplemented\fP\fP 
.RE
.PP
The exact semantics of \fBPrecompute()\fP varies, but it typically means calculate a table of n objects that can be used later to speed up computation\&.

.PP
If a derived class does not override \fBPrecompute()\fP, then the base class throws \fBNotImplemented\fP\&. 
.PP
\fBSee also\fP
.RS 4
\fBSupportsPrecomputation()\fP, \fBLoadPrecomputation()\fP, \fBSavePrecomputation()\fP 
.RE
.PP

.PP
Reimplemented from \fBCryptoMaterial\fP\&.
.SS "template<class GP> void \fBDL_PublicKeyImpl\fP< GP >::SavePrecomputation (\fBBufferedTransformation\fP & storedPrecomputation) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Save precomputation for later use\&. 
.PP
\fBParameters\fP
.RS 4
\fIstoredPrecomputation\fP \fBBufferedTransformation\fP to write the precomputation 
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBNotImplemented\fP\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBSupportsPrecomputation()\fP, \fBPrecompute()\fP 
.RE
.PP

.PP
Reimplemented from \fBCryptoMaterial\fP\&.
.SS "template<class GP> bool \fBDL_PublicKeyImpl\fP< GP >::SupportsPrecomputation () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determines whether the object supports precomputation\&. 
.PP
\fBReturns\fP
.RS 4
true if the object supports precomputation, false otherwise 
.RE
.PP
\fBSee also\fP
.RS 4
\fBPrecompute()\fP 
.RE
.PP

.PP
Reimplemented from \fBCryptoMaterial\fP\&.
.SS "template<class GP> bool \fBDL_PublicKeyImpl\fP< GP >::Validate (\fBRandomNumberGenerator\fP & rng, unsigned int level) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Check this object for errors\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP for objects which use randomized testing 
.br
\fIlevel\fP the level of thoroughness 
.RE
.PP
\fBReturns\fP
.RS 4
true if the tests succeed, false otherwise
.RE
.PP
There are four levels of thoroughness: 
.PD 0
.IP "\(bu" 2
0 - using this object won't cause a crash or exception 
.IP "\(bu" 2
1 - this object will probably function, and encrypt, sign, other operations correctly 
.IP "\(bu" 2
2 - ensure this object will function correctly, and perform reasonable security checks 
.IP "\(bu" 2
3 - perform reasonable security checks, and do checks that may take a long time 
.PP

.PP
Level 0 does not require a \fBRandomNumberGenerator\fP\&. A \fBNullRNG()\fP can be used for level 0\&. Level 1 may not check for weak keys and such\&. Levels 2 and 3 are recommended\&. 
.PP
\fBSee also\fP
.RS 4
\fBThrowIfInvalid()\fP 
.RE
.PP

.PP
Implements \fBCryptoMaterial\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
