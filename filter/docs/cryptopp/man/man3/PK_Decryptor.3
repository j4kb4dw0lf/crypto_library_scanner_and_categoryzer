.TH "PK_Decryptor" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PK_Decryptor \- Interface for public-key decryptors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <cryptlib\&.h>\fP
.PP
Inherits \fBPK_CryptoSystem\fP, and \fBPrivateKeyAlgorithm\fP\&.
.PP
Inherited by \fBDL_CryptoSystemBase< PK_Decryptor, DL_PrivateKey< T > >\fP, \fBDL_CryptoSystemBase< PK_Decryptor, DL_PrivateKey< SCHEME_OPTIONS::Element > >\fP, and \fBPK_FixedLengthCryptoSystemImpl< PK_Decryptor >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBDecodingResult\fP \fBDecrypt\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *ciphertext, size_t ciphertextLength, \fBbyte\fP *plaintext, const \fBNameValuePairs\fP &parameters=g_nullNameValuePairs) const =0"
.br
.RI "Decrypt a byte string\&. "
.ti -1c
.RI "virtual \fBBufferedTransformation\fP * \fBCreateDecryptionFilter\fP (\fBRandomNumberGenerator\fP &rng, \fBBufferedTransformation\fP *attachment=NULLPTR, const \fBNameValuePairs\fP &parameters=g_nullNameValuePairs) const"
.br
.RI "Create a new decryption filter\&. "
.ti -1c
.RI "\fBDecodingResult\fP \fBFixedLengthDecrypt\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *ciphertext, \fBbyte\fP *plaintext, const \fBNameValuePairs\fP &parameters=g_nullNameValuePairs) const"
.br
.RI "Decrypt a fixed size ciphertext\&. "
.in -1c

Public Member Functions inherited from \fBPK_CryptoSystem\fP
.in +1c
.ti -1c
.RI "virtual size_t \fBMaxPlaintextLength\fP (size_t ciphertextLength) const =0"
.br
.RI "Provides the maximum length of plaintext for a given ciphertext length\&. "
.ti -1c
.RI "virtual size_t \fBCiphertextLength\fP (size_t plaintextLength) const =0"
.br
.RI "Calculate the length of ciphertext given length of plaintext\&. "
.ti -1c
.RI "virtual bool \fBParameterSupported\fP (const char *name) const =0"
.br
.RI "Determines whether this object supports the use of a named parameter\&. "
.ti -1c
.RI "virtual size_t \fBFixedCiphertextLength\fP () const"
.br
.RI "Provides the fixed ciphertext length, if one exists\&. "
.ti -1c
.RI "virtual size_t \fBFixedMaxPlaintextLength\fP () const"
.br
.RI "Provides the maximum plaintext length given a fixed ciphertext length\&. "
.in -1c

Public Member Functions inherited from \fBPrivateKeyAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBCryptoMaterial\fP & \fBAccessMaterial\fP ()"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "const \fBCryptoMaterial\fP & \fBGetMaterial\fP () const"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "virtual \fBPrivateKey\fP & \fBAccessPrivateKey\fP ()=0"
.br
.RI "Retrieves a reference to a Private Key\&. "
.ti -1c
.RI "virtual const \fBPrivateKey\fP & \fBGetPrivateKey\fP () const"
.br
.RI "Retrieves a reference to a Private Key\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SH "Detailed Description"
.PP 
Interface for public-key decryptors\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBBufferedTransformation\fP * PK_Decryptor::CreateDecryptionFilter (\fBRandomNumberGenerator\fP & rng, \fBBufferedTransformation\fP * attachment = \fRNULLPTR\fP, const \fBNameValuePairs\fP & parameters = \fRg_nullNameValuePairs\fP) const\fR [virtual]\fP"

.PP
Create a new decryption filter\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIattachment\fP an attached transformation 
.br
\fIparameters\fP a set of \fBNameValuePairs\fP to initialize this object 
.RE
.PP
\fBReturns\fP
.RS 4
the newly created decryption filter 
.RE
.PP
\fBNote\fP
.RS 4
the caller is responsible for deleting the returned pointer 
.RE
.PP

.SS "virtual \fBDecodingResult\fP PK_Decryptor::Decrypt (\fBRandomNumberGenerator\fP & rng, const \fBbyte\fP * ciphertext, size_t ciphertextLength, \fBbyte\fP * plaintext, const \fBNameValuePairs\fP & parameters = \fRg_nullNameValuePairs\fP) const\fR [pure virtual]\fP"

.PP
Decrypt a byte string\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIciphertext\fP the encrypted byte buffer 
.br
\fIciphertextLength\fP the size of the encrypted byte buffer 
.br
\fIplaintext\fP a byte buffer to hold the decrypted string 
.br
\fIparameters\fP a set of \fBNameValuePairs\fP to initialize this object 
.RE
.PP
\fBReturns\fP
.RS 4
the result of the decryption operation
.RE
.PP
If \fBDecodingResult::isValidCoding\fP is true, then \fBDecodingResult::messageLength\fP is valid and holds the actual length of the plaintext recovered\&. The result is undefined if decryption failed\&. If \fBDecodingResult::isValidCoding\fP is false, then \fBDecodingResult::messageLength\fP is undefined\&. 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(plaintext) == MaxPlaintextLength(ciphertextLength)\fP ensures the output byte buffer is large enough 
.RE
.PP
\fBSee also\fP
.RS 4
\fBPK_Encryptor\fP 
.RE
.PP

.PP
Implemented in \fBDL_DecryptorBase< T >\fP, \fBDL_DecryptorBase< SCHEME_OPTIONS::Element >\fP, and \fBTF_DecryptorBase\fP\&.
.SS "\fBDecodingResult\fP PK_Decryptor::FixedLengthDecrypt (\fBRandomNumberGenerator\fP & rng, const \fBbyte\fP * ciphertext, \fBbyte\fP * plaintext, const \fBNameValuePairs\fP & parameters = \fRg_nullNameValuePairs\fP) const\fR [inline]\fP"

.PP
Decrypt a fixed size ciphertext\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIciphertext\fP the encrypted byte buffer 
.br
\fIplaintext\fP a byte buffer to hold the decrypted string 
.br
\fIparameters\fP a set of \fBNameValuePairs\fP to initialize this object 
.RE
.PP
\fBReturns\fP
.RS 4
the result of the decryption operation
.RE
.PP
If \fBDecodingResult::isValidCoding\fP is true, then \fBDecodingResult::messageLength\fP is valid and holds the actual length of the plaintext recovered\&. The result is undefined if decryption failed\&. If \fBDecodingResult::isValidCoding\fP is false, then \fBDecodingResult::messageLength\fP is undefined\&. 
.PP
\fBPrecondition\fP
.RS 4
\fRCOUNTOF(plaintext) == MaxPlaintextLength(ciphertextLength)\fP ensures the output byte buffer is large enough 
.RE
.PP
\fBSee also\fP
.RS 4
\fBPK_Encryptor\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
