.TH "PK_Encryptor" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PK_Encryptor \- Interface for public-key encryptors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <cryptlib\&.h>\fP
.PP
Inherits \fBPK_CryptoSystem\fP, and \fBPublicKeyAlgorithm\fP\&.
.PP
Inherited by \fBDL_CryptoSystemBase< PK_Encryptor, DL_PublicKey< T > >\fP, \fBDL_CryptoSystemBase< PK_Encryptor, DL_PublicKey< SCHEME_OPTIONS::Element > >\fP, and \fBPK_FixedLengthCryptoSystemImpl< PK_Encryptor >\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBInvalidPlaintextLength\fP"
.br
.RI "\fBException\fP thrown when trying to encrypt plaintext of invalid length\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBEncrypt\fP (\fBRandomNumberGenerator\fP &rng, const \fBbyte\fP *plaintext, size_t plaintextLength, \fBbyte\fP *ciphertext, const \fBNameValuePairs\fP &parameters=g_nullNameValuePairs) const =0"
.br
.RI "Encrypt a byte string\&. "
.ti -1c
.RI "virtual \fBBufferedTransformation\fP * \fBCreateEncryptionFilter\fP (\fBRandomNumberGenerator\fP &rng, \fBBufferedTransformation\fP *attachment=NULLPTR, const \fBNameValuePairs\fP &parameters=g_nullNameValuePairs) const"
.br
.RI "Create a new encryption filter\&. "
.in -1c

Public Member Functions inherited from \fBPK_CryptoSystem\fP
.in +1c
.ti -1c
.RI "virtual size_t \fBMaxPlaintextLength\fP (size_t ciphertextLength) const =0"
.br
.RI "Provides the maximum length of plaintext for a given ciphertext length\&. "
.ti -1c
.RI "virtual size_t \fBCiphertextLength\fP (size_t plaintextLength) const =0"
.br
.RI "Calculate the length of ciphertext given length of plaintext\&. "
.ti -1c
.RI "virtual bool \fBParameterSupported\fP (const char *name) const =0"
.br
.RI "Determines whether this object supports the use of a named parameter\&. "
.ti -1c
.RI "virtual size_t \fBFixedCiphertextLength\fP () const"
.br
.RI "Provides the fixed ciphertext length, if one exists\&. "
.ti -1c
.RI "virtual size_t \fBFixedMaxPlaintextLength\fP () const"
.br
.RI "Provides the maximum plaintext length given a fixed ciphertext length\&. "
.in -1c

Public Member Functions inherited from \fBPublicKeyAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBCryptoMaterial\fP & \fBAccessMaterial\fP ()"
.br
.RI "Retrieves a reference to a Public Key\&. "
.ti -1c
.RI "const \fBCryptoMaterial\fP & \fBGetMaterial\fP () const"
.br
.RI "Retrieves a reference to a Public Key\&. "
.ti -1c
.RI "virtual \fBPublicKey\fP & \fBAccessPublicKey\fP ()=0"
.br
.RI "Retrieves a reference to a Public Key\&. "
.ti -1c
.RI "virtual const \fBPublicKey\fP & \fBGetPublicKey\fP () const"
.br
.RI "Retrieves a reference to a Public Key\&. "
.in -1c

Public Member Functions inherited from \fBAlgorithm\fP
.in +1c
.ti -1c
.RI "\fBAlgorithm\fP (bool checkSelfTestStatus=true)"
.br
.RI "Interface for all crypto algorithms\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmName\fP () const"
.br
.RI "Provides the name of this algorithm\&. "
.ti -1c
.RI "virtual std::string \fBAlgorithmProvider\fP () const"
.br
.RI "Retrieve the provider of this algorithm\&. "
.in -1c

Public Member Functions inherited from \fBClonable\fP
.in +1c
.ti -1c
.RI "virtual \fBClonable\fP * \fBClone\fP () const"
.br
.RI "Copies this object\&. "
.in -1c
.SH "Detailed Description"
.PP 
Interface for public-key encryptors\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBBufferedTransformation\fP * PK_Encryptor::CreateEncryptionFilter (\fBRandomNumberGenerator\fP & rng, \fBBufferedTransformation\fP * attachment = \fRNULLPTR\fP, const \fBNameValuePairs\fP & parameters = \fRg_nullNameValuePairs\fP) const\fR [virtual]\fP"

.PP
Create a new encryption filter\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIattachment\fP an attached transformation 
.br
\fIparameters\fP a set of \fBNameValuePairs\fP to initialize this object
.RE
.PP
\fRattachment\fP can be \fRNULL\fP\&. The caller is responsible for deleting the returned pointer\&. Encoding parameters should be passed in the "EP" channel\&. 
.SS "virtual void PK_Encryptor::Encrypt (\fBRandomNumberGenerator\fP & rng, const \fBbyte\fP * plaintext, size_t plaintextLength, \fBbyte\fP * ciphertext, const \fBNameValuePairs\fP & parameters = \fRg_nullNameValuePairs\fP) const\fR [pure virtual]\fP"

.PP
Encrypt a byte string\&. 
.PP
\fBParameters\fP
.RS 4
\fIrng\fP a \fBRandomNumberGenerator\fP derived class 
.br
\fIplaintext\fP the plaintext byte buffer 
.br
\fIplaintextLength\fP the size of the plaintext byte buffer 
.br
\fIciphertext\fP a byte buffer to hold the encrypted string 
.br
\fIparameters\fP a set of \fBNameValuePairs\fP to initialize this object 
.RE
.PP
\fBPrecondition\fP
.RS 4
\fRCiphertextLength(plaintextLength) != 0\fP ensures the plaintext isn't too large 

.PP
\fRCOUNTOF(ciphertext) == CiphertextLength(plaintextLength)\fP ensures the output byte buffer is large enough\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBPK_Decryptor\fP 
.RE
.PP

.PP
Implemented in \fBDL_EncryptorBase< T >\fP, \fBDL_EncryptorBase< SCHEME_OPTIONS::Element >\fP, and \fBTF_EncryptorBase\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
