.TH "EuclideanDomainOf< T >" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EuclideanDomainOf< T > \- Euclidean domain\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <algebra\&.h>\fP
.PP
Inherits \fBAbstractEuclideanDomain< T >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBAbstractEuclideanDomain< T >\fP
.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBAbstractRing< T >\fP
.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c

Public Types inherited from \fBAbstractGroup< T >\fP
.in +1c
.ti -1c
.RI "typedef T \fBElement\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBEqual\fP (const Element &a, const Element &b) const"
.br
.RI "Compare two elements for equality\&. "
.ti -1c
.RI "const Element & \fBIdentity\fP () const"
.br
.RI "Provides the Identity element\&. "
.ti -1c
.RI "const Element & \fBAdd\fP (const Element &a, const Element &b) const"
.br
.RI "Adds elements in the group\&. "
.ti -1c
.RI "Element & \fBAccumulate\fP (Element &a, const Element &b) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "const Element & \fBInverse\fP (const Element &a) const"
.br
.RI "Inverts the element in the group\&. "
.ti -1c
.RI "const Element & \fBSubtract\fP (const Element &a, const Element &b) const"
.br
.RI "Subtracts elements in the group\&. "
.ti -1c
.RI "Element & \fBReduce\fP (Element &a, const Element &b) const"
.br
.RI "Reduces an element in the congruence class\&. "
.ti -1c
.RI "const Element & \fBDouble\fP (const Element &a) const"
.br
.RI "Doubles an element in the group\&. "
.ti -1c
.RI "const Element & \fBMultiplicativeIdentity\fP () const"
.br
.RI "Retrieves the multiplicative identity\&. "
.ti -1c
.RI "const Element & \fBMultiply\fP (const Element &a, const Element &b) const"
.br
.RI "Multiplies elements in the group\&. "
.ti -1c
.RI "const Element & \fBSquare\fP (const Element &a) const"
.br
.RI "\fBSquare\fP an element in the group\&. "
.ti -1c
.RI "bool \fBIsUnit\fP (const Element &a) const"
.br
.RI "Determines whether an element is a unit in the group\&. "
.ti -1c
.RI "const Element & \fBMultiplicativeInverse\fP (const Element &a) const"
.br
.RI "Calculate the multiplicative inverse of an element in the group\&. "
.ti -1c
.RI "const Element & \fBDivide\fP (const Element &a, const Element &b) const"
.br
.RI "Divides elements in the group\&. "
.ti -1c
.RI "const Element & \fBMod\fP (const Element &a, const Element &b) const"
.br
.RI "Performs a modular reduction in the ring\&. "
.ti -1c
.RI "void \fBDivisionAlgorithm\fP (Element &r, Element &q, const Element &a, const Element &d) const"
.br
.RI "Performs the division algorithm on two elements in the ring\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBEuclideanDomainOf\fP< T > &rhs) const"
.br
.in -1c

Public Member Functions inherited from \fBAbstractEuclideanDomain< T >\fP
.in +1c
.ti -1c
.RI "virtual const Element & \fBGcd\fP (const Element &a, const Element &b) const"
.br
.RI "Calculates the greatest common denominator in the ring\&. "
.in -1c

Public Member Functions inherited from \fBAbstractRing< T >\fP
.in +1c
.ti -1c
.RI "\fBAbstractRing\fP ()"
.br
.RI "Construct an \fBAbstractRing\fP\&. "
.ti -1c
.RI "\fBAbstractRing\fP (const \fBAbstractRing\fP &source)"
.br
.RI "Copy construct an \fBAbstractRing\fP\&. "
.ti -1c
.RI "\fBAbstractRing\fP & \fBoperator=\fP (const \fBAbstractRing\fP &source)"
.br
.RI "Assign an \fBAbstractRing\fP\&. "
.ti -1c
.RI "virtual Element \fBExponentiate\fP (const Element &a, const \fBInteger\fP &e) const"
.br
.RI "Raises a base to an exponent in the group\&. "
.ti -1c
.RI "virtual Element \fBCascadeExponentiate\fP (const Element &x, const \fBInteger\fP &e1, const Element &y, const \fBInteger\fP &e2) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual void \fBSimultaneousExponentiate\fP (Element *results, const Element &base, const \fBInteger\fP *exponents, unsigned int exponentsCount) const"
.br
.RI "Exponentiates a base to multiple exponents in the Ring\&. "
.ti -1c
.RI "virtual const \fBAbstractGroup\fP< T > & \fBMultiplicativeGroup\fP () const"
.br
.RI "Retrieves the multiplicative group\&. "
.in -1c

Public Member Functions inherited from \fBAbstractGroup< T >\fP
.in +1c
.ti -1c
.RI "virtual bool \fBInversionIsFast\fP () const"
.br
.RI "Determine if inversion is fast\&. "
.ti -1c
.RI "virtual Element \fBScalarMultiply\fP (const Element &a, const \fBInteger\fP &e) const"
.br
.RI "Performs a scalar multiplication\&. "
.ti -1c
.RI "virtual Element \fBCascadeScalarMultiply\fP (const Element &x, const \fBInteger\fP &e1, const Element &y, const \fBInteger\fP &e2) const"
.br
.RI "TODO\&. "
.ti -1c
.RI "virtual void \fBSimultaneousMultiply\fP (Element *results, const Element &base, const \fBInteger\fP *exponents, unsigned int exponentsCount) const"
.br
.RI "Multiplies a base to multiple exponents in a group\&. "
.in -1c
.SS "Additional Inherited Members"


Protected Attributes inherited from \fBAbstractEuclideanDomain< T >\fP
.in +1c
.ti -1c
.RI "Element \fBresult\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T>
.br
class EuclideanDomainOf< T >"Euclidean domain\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP element class or type
.RE
.PP
\fRconst Element&\fP returned by member functions are references to internal data members\&. Since each object may have only one such data member for holding results, the following code will produce incorrect results: 
.PP
.nf
    abcd = group\&.Add(group\&.Add(a,b), group\&.Add(c,d));
.fi
.PP
 But this should be fine: 
.PP
.nf
    abcd = group\&.Add(a, group\&.Add(b, group\&.Add(c,d));
.fi
.PP
 
.SH "Member Function Documentation"
.PP 
.SS "template<class T> Element & \fBEuclideanDomainOf\fP< T >::Accumulate (Element & a, const Element & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
TODO\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
TODO 
.RE
.PP

.PP
Reimplemented from \fBAbstractGroup< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::Add (const Element & a, const Element & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Adds elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
the sum of \fRa\fP and \fRb\fP 
.RE
.PP

.PP
Implements \fBAbstractGroup< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::Divide (const Element & a, const Element & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Divides elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the dividend 
.br
\fIb\fP the divisor 
.RE
.PP
\fBReturns\fP
.RS 4
the quotient 
.RE
.PP

.PP
Reimplemented from \fBAbstractRing< T >\fP\&.
.SS "template<class T> void \fBEuclideanDomainOf\fP< T >::DivisionAlgorithm (Element & r, Element & q, const Element & a, const Element & d) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Performs the division algorithm on two elements in the ring\&. 
.PP
\fBParameters\fP
.RS 4
\fIr\fP the remainder 
.br
\fIq\fP the quotient 
.br
\fIa\fP the dividend 
.br
\fId\fP the divisor 
.RE
.PP

.PP
Implements \fBAbstractEuclideanDomain< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::Double (const Element & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Doubles an element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP
\fBReturns\fP
.RS 4
the element doubled 
.RE
.PP

.PP
Reimplemented from \fBAbstractGroup< T >\fP\&.
.SS "template<class T> bool \fBEuclideanDomainOf\fP< T >::Equal (const Element & a, const Element & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Compare two elements for equality\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
true if the elements are equal, false otherwise
.RE
.PP
\fBEqual()\fP tests the elements for equality using \fRa==b\fP 
.PP
Implements \fBAbstractGroup< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::Identity () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Provides the Identity element\&. 
.PP
\fBReturns\fP
.RS 4
the Identity element 
.RE
.PP

.PP
Implements \fBAbstractGroup< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::Inverse (const Element & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Inverts the element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.RE
.PP
\fBReturns\fP
.RS 4
the inverse of the element 
.RE
.PP

.PP
Implements \fBAbstractGroup< T >\fP\&.
.SS "template<class T> bool \fBEuclideanDomainOf\fP< T >::IsUnit (const Element & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Determines whether an element is a unit in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP
\fBReturns\fP
.RS 4
true if the element is a unit after reduction, false otherwise\&. 
.RE
.PP

.PP
Implements \fBAbstractRing< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::Mod (const Element & a, const Element & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Performs a modular reduction in the ring\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.br
\fIb\fP the modulus 
.RE
.PP
\fBReturns\fP
.RS 4
the result of \fRab\fP\&. 
.RE
.PP

.PP
Implements \fBAbstractEuclideanDomain< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::MultiplicativeIdentity () const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Retrieves the multiplicative identity\&. 
.PP
\fBReturns\fP
.RS 4
the multiplicative identity 
.RE
.PP

.PP
Implements \fBAbstractRing< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::MultiplicativeInverse (const Element & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Calculate the multiplicative inverse of an element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP

.PP
Implements \fBAbstractRing< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::Multiply (const Element & a, const Element & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Multiplies elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the multiplicand 
.br
\fIb\fP the multiplier 
.RE
.PP
\fBReturns\fP
.RS 4
the product of a and b 
.RE
.PP

.PP
Implements \fBAbstractRing< T >\fP\&.
.SS "template<class T> Element & \fBEuclideanDomainOf\fP< T >::Reduce (Element & a, const Element & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Reduces an element in the congruence class\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP element to reduce 
.br
\fIb\fP the congruence class 
.RE
.PP
\fBReturns\fP
.RS 4
the reduced element 
.RE
.PP

.PP
Reimplemented from \fBAbstractGroup< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >\fB::Square\fP (const Element & a) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
\fBSquare\fP an element in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the element 
.RE
.PP
\fBReturns\fP
.RS 4
the element squared 
.RE
.PP

.PP
Reimplemented from \fBAbstractRing< T >\fP\&.
.SS "template<class T> const Element & \fBEuclideanDomainOf\fP< T >::Subtract (const Element & a, const Element & b) const\fR [inline]\fP, \fR [virtual]\fP"

.PP
Subtracts elements in the group\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP first element 
.br
\fIb\fP second element 
.RE
.PP
\fBReturns\fP
.RS 4
the difference of \fRa\fP and \fRb\fP\&. The element \fRa\fP must provide a Subtract member function\&. 
.RE
.PP

.PP
Reimplemented from \fBAbstractGroup< T >\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
