.TH "libssh_string" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libssh_string \- The SSH string functions
.PP
 \- String manipulations used in libssh\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBssh_string_struct\fP * \fBssh_string_new\fP (size_t size)"
.br
.RI "Create a new SSH String object\&. "
.ti -1c
.RI "int \fBssh_string_fill\fP (struct \fBssh_string_struct\fP *s, const void *data, size_t len)"
.br
.RI "Fill a string with given data\&. The string should be big enough\&. "
.ti -1c
.RI "struct \fBssh_string_struct\fP * \fBssh_string_from_char\fP (const char *what)"
.br
.RI "Create a ssh string using a C string\&. "
.ti -1c
.RI "size_t \fBssh_string_len\fP (struct \fBssh_string_struct\fP *s)"
.br
.RI "Return the size of a SSH string\&. "
.ti -1c
.RI "const char * \fBssh_string_get_char\fP (struct \fBssh_string_struct\fP *s)"
.br
.RI "Get the string as a C null-terminated string\&. "
.ti -1c
.RI "char * \fBssh_string_to_char\fP (struct \fBssh_string_struct\fP *s)"
.br
.RI "Convert a SSH string to a C null-terminated string\&. "
.ti -1c
.RI "void \fBssh_string_free_char\fP (char *s)"
.br
.RI "Deallocate a char string object\&. "
.ti -1c
.RI "struct \fBssh_string_struct\fP * \fBssh_string_copy\fP (struct \fBssh_string_struct\fP *s)"
.br
.RI "Copy a string, return a newly allocated string\&. The caller has to free the string\&. "
.ti -1c
.RI "int \fBssh_string_cmp\fP (struct \fBssh_string_struct\fP *s1, struct \fBssh_string_struct\fP *s2)"
.br
.RI "Compare two SSH strings\&. "
.ti -1c
.RI "void \fBssh_string_burn\fP (struct \fBssh_string_struct\fP *s)"
.br
.RI "Destroy the data in a string so it couldn't appear in a core dump\&. "
.ti -1c
.RI "void * \fBssh_string_data\fP (struct \fBssh_string_struct\fP *s)"
.br
.RI "Get the payload of the string\&. "
.ti -1c
.RI "void \fBssh_string_free\fP (struct \fBssh_string_struct\fP *s)"
.br
.RI "Deallocate a SSH string object\&. "
.in -1c
.SH "Detailed Description"
.PP 
String manipulations used in libssh\&. 


.SH "Function Documentation"
.PP 
.SS "void ssh_string_burn (struct \fBssh_string_struct\fP * s)"

.PP
Destroy the data in a string so it couldn't appear in a core dump\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP The string to burn\&. 
.RE
.PP

.SS "int ssh_string_cmp (struct \fBssh_string_struct\fP * s1, struct \fBssh_string_struct\fP * s2)"

.PP
Compare two SSH strings\&. 
.PP
\fBParameters\fP
.RS 4
\fIs1\fP The first SSH string to compare\&. 
.br
\fIs2\fP The second SSH string to compare\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 if the strings are equal, < 0 if s1 is less than s2, > 0 if s1 is greater than s2\&. 
.RE
.PP

.SS "struct \fBssh_string_struct\fP * ssh_string_copy (struct \fBssh_string_struct\fP * s)"

.PP
Copy a string, return a newly allocated string\&. The caller has to free the string\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP String to copy\&.
.RE
.PP
\fBReturns\fP
.RS 4
Newly allocated copy of the string, NULL on error\&. 
.RE
.PP

.SS "void * ssh_string_data (struct \fBssh_string_struct\fP * s)"

.PP
Get the payload of the string\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP The string to get the data from\&.
.RE
.PP
\fBReturns\fP
.RS 4
Return the data of the string or NULL on error\&. 
.RE
.PP

.SS "int ssh_string_fill (struct \fBssh_string_struct\fP * s, const void * data, size_t len)"

.PP
Fill a string with given data\&. The string should be big enough\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP An allocated string to fill with data\&.
.br
\fIdata\fP The data to fill the string with\&.
.br
\fIlen\fP Size of data\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 on success, < 0 on error\&. 
.RE
.PP

.SS "void ssh_string_free (struct \fBssh_string_struct\fP * s)"

.PP
Deallocate a SSH string object\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP The SSH string to delete\&. 
.RE
.PP

.SS "void ssh_string_free_char (char * s)"

.PP
Deallocate a char string object\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP The string to delete\&. 
.RE
.PP

.SS "struct \fBssh_string_struct\fP * ssh_string_from_char (const char * what)"

.PP
Create a ssh string using a C string\&. 
.PP
\fBParameters\fP
.RS 4
\fIwhat\fP The source 0-terminated C string\&.
.RE
.PP
\fBReturns\fP
.RS 4
The newly allocated string, NULL on error with errno set\&.
.RE
.PP
\fBNote\fP
.RS 4
The null byte is not copied nor counted in the output string\&. 
.RE
.PP

.SS "const char * ssh_string_get_char (struct \fBssh_string_struct\fP * s)"

.PP
Get the string as a C null-terminated string\&. This is only available as long as the SSH string exists\&.

.PP
\fBParameters\fP
.RS 4
\fIs\fP The SSH string to get the C string from\&.
.RE
.PP
\fBReturns\fP
.RS 4
The char pointer, NULL on error\&. 
.RE
.PP

.SS "size_t ssh_string_len (struct \fBssh_string_struct\fP * s)"

.PP
Return the size of a SSH string\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP The input SSH string\&.
.RE
.PP
\fBReturns\fP
.RS 4
The size of the content of the string, 0 on error\&. 
.RE
.PP

.SS "struct \fBssh_string_struct\fP * ssh_string_new (size_t size)"

.PP
Create a new SSH String object\&. 
.PP
\fBParameters\fP
.RS 4
\fIsize\fP The size of the string\&.
.RE
.PP
\fBReturns\fP
.RS 4
The newly allocated string, NULL on error\&. 
.RE
.PP

.SS "char * ssh_string_to_char (struct \fBssh_string_struct\fP * s)"

.PP
Convert a SSH string to a C null-terminated string\&. 
.PP
\fBParameters\fP
.RS 4
\fIs\fP The SSH input string\&.
.RE
.PP
\fBReturns\fP
.RS 4
An allocated string pointer, NULL on error with errno set\&.
.RE
.PP
\fBNote\fP
.RS 4
If the input SSH string contains zeroes, some parts of the output string may not be readable with regular libc functions\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
