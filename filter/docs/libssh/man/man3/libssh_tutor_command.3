.TH "libssh_tutor_command" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libssh_tutor_command \- Chapter 4: Passing a remote command 
.PP

.SH "Passing a remote command"
.PP
Previous chapter has shown how to open a full shell session, with an attached terminal or not\&. If you only need to execute a command on the remote end, you don't need all that complexity\&.

.PP
The method described here is suited for executing only one remote command\&. If you need to issue several commands in a row, you should consider using a non-interactive remote shell, as explained in previous chapter\&.

.PP
\fBSee also\fP
.RS 4
shell
.RE
.PP
.SS "Executing a remote command"
The first steps for executing a remote command are identical to those for opening remote shells\&. You first need a SSH channel, and then a SSH session that uses this channel:

.PP
.PP
.nf
int show_remote_files(ssh_session session)
{
  ssh_channel channel = NULL;
  int rc;

  channel = ssh_channel_new(session);
  if (channel == NULL) return SSH_ERROR;

  rc = ssh_channel_open_session(channel);
  if (rc != SSH_OK)
  {
    ssh_channel_free(channel);
    return rc;
  }
.fi
.PP

.PP
Once a session is open, you can start the remote command with \fBssh_channel_request_exec()\fP:

.PP
.PP
.nf
rc = ssh_channel_request_exec(channel, "ls \-l");
if (rc != SSH_OK)
{
  ssh_channel_close(channel);
  ssh_channel_free(channel);
  return rc;
}
.fi
.PP

.PP
If the remote command displays data, you get them with \fBssh_channel_read()\fP\&. This function returns the number of bytes read\&. If there is no more data to read on the channel, this function returns 0, and you can go to next step\&. If an error has been encountered, it returns a negative value:

.PP
.PP
.nf
char buffer[256];
int nbytes;

nbytes = ssh_channel_read(channel, buffer, sizeof(buffer), 0);
while (nbytes > 0)
{
  if (fwrite(buffer, 1, nbytes, stdout) != nbytes)
  {
    ssh_channel_close(channel);
    ssh_channel_free(channel);
    return SSH_ERROR;
  }
  nbytes = ssh_channel_read(channel, buffer, sizeof(buffer), 0);
}

if (nbytes < 0)
{
  ssh_channel_close(channel);
  ssh_channel_free(channel);
  return SSH_ERROR;
}
.fi
.PP

.PP
Once you read the result of the remote command, you send an end-of-file to the channel, close it, and free the memory that it used:

.PP
.PP
.nf
  ssh_channel_send_eof(channel);
  ssh_channel_close(channel);
  ssh_channel_free(channel);

  return SSH_OK;
}
.fi
.PP

.PP
Warning: In a single channel, only ONE command can be executed! If you want to executed multiple commands, allocate separate channels for them or consider opening interactive shell\&. Attempting to run multiple consecutive commands in one channel will fail\&. 
