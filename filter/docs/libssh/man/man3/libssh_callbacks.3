.TH "libssh_callbacks" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libssh_callbacks \- The libssh callbacks
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBssh_callbacks_struct\fP"
.br
.ti -1c
.RI "struct \fBssh_server_callbacks_struct\fP"
.br
.ti -1c
.RI "struct \fBssh_socket_callbacks_struct\fP"
.br
.ti -1c
.RI "struct \fBssh_packet_callbacks_struct\fP"
.br
.ti -1c
.RI "struct \fBssh_channel_callbacks_struct\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSSH_SOCKET_FLOW_WRITEWILLBLOCK\fP   1"
.br
.ti -1c
.RI "#define \fBSSH_SOCKET_FLOW_WRITEWONTBLOCK\fP   2"
.br
.ti -1c
.RI "#define \fBSSH_SOCKET_EXCEPTION_EOF\fP   1"
.br
.ti -1c
.RI "#define \fBSSH_SOCKET_EXCEPTION_ERROR\fP   2"
.br
.ti -1c
.RI "#define \fBSSH_SOCKET_CONNECTED_OK\fP   1"
.br
.ti -1c
.RI "#define \fBSSH_SOCKET_CONNECTED_ERROR\fP   2"
.br
.ti -1c
.RI "#define \fBSSH_SOCKET_CONNECTED_TIMEOUT\fP   3"
.br
.ti -1c
.RI "#define \fBssh_callbacks_init\fP(p)"
.br
.RI "Initializes an \fBssh_callbacks_struct\fP A call to this macro is mandatory when you have set a new ssh_callback_struct structure\&. Its goal is to maintain the binary compatibility with future versions of libssh as the structure evolves with time\&. "
.ti -1c
.RI "#define \fBssh_callbacks_exists\fP(p,  c)"
.br
.ti -1c
.RI "#define \fBssh_callbacks_execute_list\fP(list,  cbtype,  c, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBssh_callbacks_iterate\fP(_cb_list,  _cb_type,  _cb_name)"
.br
.ti -1c
.RI "#define \fBssh_callbacks_iterate_exec\fP(_cb_name, \&.\&.\&.)"
.br
.ti -1c
.RI "#define \fBssh_callbacks_iterate_end\fP()"
.br
.ti -1c
.RI "#define \fBSSH_PACKET_USED\fP   1"
.br
.ti -1c
.RI "#define \fBSSH_PACKET_NOT_USED\fP   2"
.br
.ti -1c
.RI "#define \fBSSH_PACKET_CALLBACK\fP(name)"
.br
.RI "This macro declares a packet callback handler\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBssh_callback_int\fP) (int code, void *user)"
.br
.ti -1c
.RI "typedef size_t(* \fBssh_callback_data\fP) (const void *data, size_t len, void *user)"
.br
.ti -1c
.RI "typedef void(* \fBssh_callback_int_int\fP) (int code, int errno_code, void *user)"
.br
.ti -1c
.RI "typedef int(* \fBssh_message_callback\fP) (\fBssh_session\fP, \fBssh_message\fP message, void *user)"
.br
.ti -1c
.RI "typedef int(* \fBssh_channel_callback_int\fP) (\fBssh_channel\fP channel, int code, void *user)"
.br
.ti -1c
.RI "typedef int(* \fBssh_channel_callback_data\fP) (\fBssh_channel\fP channel, int code, void *data, size_t len, void *user)"
.br
.ti -1c
.RI "typedef void(* \fBssh_log_callback\fP) (\fBssh_session\fP session, int priority, const char *message, void *userdata)"
.br
.RI "SSH log callback\&. All logging messages will go through this callback\&. "
.ti -1c
.RI "typedef void(* \fBssh_logging_callback\fP) (int priority, const char *function, const char *buffer, void *userdata)"
.br
.RI "SSH log callback\&. "
.ti -1c
.RI "typedef void(* \fBssh_status_callback\fP) (\fBssh_session\fP session, float status, void *userdata)"
.br
.RI "SSH Connection status callback\&. "
.ti -1c
.RI "typedef void(* \fBssh_global_request_callback\fP) (\fBssh_session\fP session, \fBssh_message\fP message, void *userdata)"
.br
.RI "SSH global request callback\&. All global request will go through this callback\&. "
.ti -1c
.RI "typedef void(* \fBssh_connect_status_callback\fP) (void *userdata, float status)"
.br
.RI "SSH connect status callback\&. These are functions that report the status of the connection i,e\&. a function indicating the completed percentage of the connection steps\&. "
.ti -1c
.RI "typedef \fBssh_channel\fP(* \fBssh_channel_open_request_x11_callback\fP) (\fBssh_session\fP session, const char *originator_address, int originator_port, void *userdata)"
.br
.RI "Handles an SSH new channel open X11 request\&. This happens when the server sends back an X11 connection attempt\&. This is a client-side API\&. "
.ti -1c
.RI "typedef \fBssh_channel\fP(* \fBssh_channel_open_request_auth_agent_callback\fP) (\fBssh_session\fP session, void *userdata)"
.br
.RI "Handles an SSH new channel open "auth-agent" request\&. This happens when the server sends back an "auth-agent" connection attempt\&. This is a client-side API\&. "
.ti -1c
.RI "typedef \fBssh_channel\fP(* \fBssh_channel_open_request_forwarded_tcpip_callback\fP) (\fBssh_session\fP session, const char *destination_address, int destination_port, const char *originator_address, int originator_port, void *userdata)"
.br
.RI "Handles an SSH new channel open "forwarded-tcpip" request\&. This happens when the server forwards an incoming TCP connection on a port it was previously requested to listen on\&. This is a client-side API\&. "
.ti -1c
.RI "typedef struct \fBssh_callbacks_struct\fP * \fBssh_callbacks\fP"
.br
.ti -1c
.RI "typedef int(* \fBssh_auth_password_callback\fP) (\fBssh_session\fP session, const char *user, const char *password, void *userdata)"
.br
.RI "SSH authentication callback\&. "
.ti -1c
.RI "typedef int(* \fBssh_auth_none_callback\fP) (\fBssh_session\fP session, const char *user, void *userdata)"
.br
.RI "SSH authentication callback\&. Tries to authenticates user with the "none" method which is anonymous or passwordless\&. "
.ti -1c
.RI "typedef int(* \fBssh_auth_gssapi_mic_callback\fP) (\fBssh_session\fP session, const char *user, const char *principal, void *userdata)"
.br
.RI "SSH authentication callback\&. Tries to authenticates user with the "gssapi-with-mic" method\&. "
.ti -1c
.RI "typedef int(* \fBssh_auth_pubkey_callback\fP) (\fBssh_session\fP session, const char *user, struct \fBssh_key_struct\fP *pubkey, char signature_state, void *userdata)"
.br
.RI "SSH authentication callback\&. "
.ti -1c
.RI "typedef int(* \fBssh_service_request_callback\fP) (\fBssh_session\fP session, const char *service, void *userdata)"
.br
.RI "Handles an SSH service request\&. "
.ti -1c
.RI "typedef \fBssh_channel\fP(* \fBssh_channel_open_request_session_callback\fP) (\fBssh_session\fP session, void *userdata)"
.br
.RI "Handles an SSH new channel open session request\&. "
.ti -1c
.RI "typedef \fBssh_string\fP(* \fBssh_gssapi_select_oid_callback\fP) (\fBssh_session\fP session, const char *user, int n_oid, \fBssh_string\fP *oids, void *userdata)"
.br
.ti -1c
.RI "typedef int(* \fBssh_gssapi_accept_sec_ctx_callback\fP) (\fBssh_session\fP session, \fBssh_string\fP input_token, \fBssh_string\fP *output_token, void *userdata)"
.br
.ti -1c
.RI "typedef int(* \fBssh_gssapi_verify_mic_callback\fP) (\fBssh_session\fP session, \fBssh_string\fP mic, void *mic_buffer, size_t mic_buffer_size, void *userdata)"
.br
.ti -1c
.RI "typedef \fBssh_channel\fP(* \fBssh_channel_open_request_direct_tcpip_callback\fP) (\fBssh_session\fP session, const char *destination_address, int destination_port, const char *originator_address, int originator_port, void *userdata)"
.br
.RI "Handles an SSH new channel open "direct-tcpip" request\&. This happens when the client forwards an incoming TCP connection on a port it wants to forward to the destination\&. This is a server-side API\&. "
.ti -1c
.RI "typedef struct \fBssh_server_callbacks_struct\fP * \fBssh_server_callbacks\fP"
.br
.ti -1c
.RI "typedef struct \fBssh_socket_callbacks_struct\fP * \fBssh_socket_callbacks\fP"
.br
.ti -1c
.RI "typedef int(* \fBssh_packet_callback\fP) (\fBssh_session\fP session, uint8_t type, \fBssh_buffer\fP packet, void *user)"
.br
.RI "Prototype for a packet callback, to be called when a new packet arrives\&. "
.ti -1c
.RI "typedef struct \fBssh_packet_callbacks_struct\fP * \fBssh_packet_callbacks\fP"
.br
.ti -1c
.RI "typedef int(* \fBssh_channel_data_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *data, uint32_t len, int is_stderr, void *userdata)"
.br
.RI "SSH channel data callback\&. Called when data is available on a channel\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_eof_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"
.br
.RI "SSH channel eof callback\&. Called when a channel receives EOF\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_close_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"
.br
.RI "SSH channel close callback\&. Called when a channel is closed by remote peer\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_signal_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *signal, void *userdata)"
.br
.RI "SSH channel signal callback\&. Called when a channel has received a signal\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_exit_status_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, int exit_status, void *userdata)"
.br
.RI "SSH channel exit status callback\&. Called when a channel has received an exit status\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_exit_signal_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *signal, int core, const char *errmsg, const char *lang, void *userdata)"
.br
.RI "SSH channel exit signal callback\&. Called when a channel has received an exit signal\&. "
.ti -1c
.RI "typedef int(* \fBssh_channel_pty_request_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *term, int width, int height, int pxwidth, int pwheight, void *userdata)"
.br
.RI "SSH channel PTY request from a client\&. "
.ti -1c
.RI "typedef int(* \fBssh_channel_shell_request_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"
.br
.RI "SSH channel Shell request from a client\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_auth_agent_req_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"
.br
.RI "SSH auth-agent-request from the client\&. This request is sent by a client when agent forwarding is available\&. Server is free to ignore this callback, no answer is expected\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_x11_req_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, int single_connection, const char *auth_protocol, const char *auth_cookie, uint32_t screen_number, void *userdata)"
.br
.RI "SSH X11 request from the client\&. This request is sent by a client when X11 forwarding is requested(and available)\&. Server is free to ignore this callback, no answer is expected\&. "
.ti -1c
.RI "typedef int(* \fBssh_channel_pty_window_change_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, int width, int height, int pxwidth, int pwheight, void *userdata)"
.br
.RI "SSH channel PTY windows change (terminal size) from a client\&. "
.ti -1c
.RI "typedef int(* \fBssh_channel_exec_request_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *command, void *userdata)"
.br
.RI "SSH channel Exec request from a client\&. "
.ti -1c
.RI "typedef int(* \fBssh_channel_env_request_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *env_name, const char *env_value, void *userdata)"
.br
.RI "SSH channel environment request from a client\&. "
.ti -1c
.RI "typedef int(* \fBssh_channel_subsystem_request_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *subsystem, void *userdata)"
.br
.RI "SSH channel subsystem request from a client\&. "
.ti -1c
.RI "typedef int(* \fBssh_channel_write_wontblock_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, uint32_t bytes, void *userdata)"
.br
.RI "SSH channel write will not block (flow control)\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_open_resp_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, bool is_success, void *userdata)"
.br
.RI "SSH channel open callback\&. Called when a channel open succeeds or fails\&. "
.ti -1c
.RI "typedef void(* \fBssh_channel_request_resp_callback\fP) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"
.br
.RI "SSH channel request response callback\&. Called when a response to the pending request is received\&. "
.ti -1c
.RI "typedef struct \fBssh_channel_callbacks_struct\fP * \fBssh_channel_callbacks\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "LIBSSH_API int \fBssh_set_server_callbacks\fP (\fBssh_session\fP session, \fBssh_server_callbacks\fP cb)"
.br
.RI "Set the session server callback functions\&. "
.ti -1c
.RI "LIBSSH_API int \fBssh_set_callbacks\fP (\fBssh_session\fP session, \fBssh_callbacks\fP cb)"
.br
.RI "Set the session callback functions\&. "
.ti -1c
.RI "LIBSSH_API int \fBssh_set_channel_callbacks\fP (\fBssh_channel\fP channel, \fBssh_channel_callbacks\fP cb)"
.br
.RI "Set the channel callback functions\&. "
.ti -1c
.RI "LIBSSH_API int \fBssh_add_channel_callbacks\fP (\fBssh_channel\fP channel, \fBssh_channel_callbacks\fP cb)"
.br
.RI "Add channel callback functions\&. "
.ti -1c
.RI "LIBSSH_API int \fBssh_remove_channel_callbacks\fP (\fBssh_channel\fP channel, \fBssh_channel_callbacks\fP cb)"
.br
.RI "Remove a channel callback\&. "
.in -1c
.SH "Detailed Description"
.PP 
Callback which can be replaced in libssh\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ssh_callbacks_execute_list( list,  cbtype,  c,  \&.\&.\&.)"
\fBValue:\fP
.nf
    do {                                                      \\
        struct ssh_iterator *i = ssh_list_get_iterator(list); \\
        cbtype cb;                                            \\
        while (i != NULL){                                    \\
            cb = ssh_iterator_value(cbtype, i);               \\
            if (ssh_callbacks_exists(cb, c))                  \\
                cb\-> c (__VA_ARGS__, cb\->userdata);           \\
            i = i\->next;                                      \\
        }                                                     \\
    } while(0)
.PP
.fi

.SS "#define ssh_callbacks_exists( p,  c)"
\fBValue:\fP
.nf
  (\\
  (p != NULL) && ( (char *)&((p)\-> c) < (char *)(p) + (p)\->size ) && \\
  ((p)\-> c != NULL) \\
  )
.PP
.fi

.SS "#define ssh_callbacks_init( p)"
\fBValue:\fP
.nf
    do {\\
    (p)\->size=sizeof(*(p)); \\
} while(0);
.PP
.fi

.PP
Initializes an \fBssh_callbacks_struct\fP A call to this macro is mandatory when you have set a new ssh_callback_struct structure\&. Its goal is to maintain the binary compatibility with future versions of libssh as the structure evolves with time\&. 
.SS "#define ssh_callbacks_iterate( _cb_list,  _cb_type,  _cb_name)"
\fBValue:\fP
.nf
    do {                                                              \\
        struct ssh_iterator *_cb_i = ssh_list_get_iterator(_cb_list); \\
        _cb_type _cb;                                                 \\
        for (; _cb_i != NULL; _cb_i = _cb_i\->next) {                  \\
            _cb = ssh_iterator_value(_cb_type, _cb_i);                \\
            if (ssh_callbacks_exists(_cb, _cb_name))
.PP
.fi

.SS "#define ssh_callbacks_iterate_end()"
\fBValue:\fP
.nf
        }                           \\
    } while(0)
.PP
.fi

.SS "#define ssh_callbacks_iterate_exec( _cb_name,  \&.\&.\&.)"
\fBValue:\fP
.nf
                _cb\->_cb_name(__VA_ARGS__, _cb\->userdata)
.PP
.fi

.SS "#define SSH_PACKET_CALLBACK( name)"
\fBValue:\fP
.nf
    int name (ssh_session session, uint8_t type, ssh_buffer packet, void *user)
.PP
.fi

.PP
This macro declares a packet callback handler\&. 
.PP
.nf
SSH_PACKET_CALLBACK(mycallback){
\&.\&.\&.
}

.fi
.PP
 
.SS "#define SSH_PACKET_NOT_USED   2"
Packet was not used and should be passed to any other callback available 
.SS "#define SSH_PACKET_USED   1"
return values for a \fBssh_packet_callback\fP Packet was used and should not be parsed by another callback 
.SH "Typedef Documentation"
.PP 
.SS "typedef int(* ssh_auth_gssapi_mic_callback) (\fBssh_session\fP session, const char *user, const char *principal, void *userdata)"

.PP
SSH authentication callback\&. Tries to authenticates user with the "gssapi-with-mic" method\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIuser\fP Username of the user (can be spoofed) 
.br
\fIprincipal\fP Authenticated principal of the user, including realm\&. 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
SSH_AUTH_SUCCESS Authentication is accepted\&. 

.PP
SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed\&. 

.PP
SSH_AUTH_DENIED Authentication failed\&. 
.RE
.PP
\fBWarning\fP
.RS 4
Implementations should verify that parameter user matches in some way the principal\&. user and principal can be different\&. Only the latter is guaranteed to be safe\&. 
.RE
.PP

.SS "typedef int(* ssh_auth_none_callback) (\fBssh_session\fP session, const char *user, void *userdata)"

.PP
SSH authentication callback\&. Tries to authenticates user with the "none" method which is anonymous or passwordless\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIuser\fP User that wants to authenticate 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
SSH_AUTH_SUCCESS Authentication is accepted\&. 

.PP
SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed\&. 

.PP
SSH_AUTH_DENIED Authentication failed\&. 
.RE
.PP

.SS "typedef int(* ssh_auth_password_callback) (\fBssh_session\fP session, const char *user, const char *password, void *userdata)"

.PP
SSH authentication callback\&. These are callbacks used specifically in SSH servers\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIuser\fP User that wants to authenticate 
.br
\fIpassword\fP Password used for authentication 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
SSH_AUTH_SUCCESS Authentication is accepted\&. 

.PP
SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed\&. 

.PP
SSH_AUTH_DENIED Authentication failed\&. 
.RE
.PP

.SS "typedef int(* ssh_auth_pubkey_callback) (\fBssh_session\fP session, const char *user, struct \fBssh_key_struct\fP *pubkey, char signature_state, void *userdata)"

.PP
SSH authentication callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIuser\fP User that wants to authenticate 
.br
\fIpubkey\fP public key used for authentication 
.br
\fIsignature_state\fP SSH_PUBLICKEY_STATE_NONE if the key is not signed (simple public key probe), SSH_PUBLICKEY_STATE_VALID if the signature is valid\&. Others values should be replied with a SSH_AUTH_DENIED\&. 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
SSH_AUTH_SUCCESS Authentication is accepted\&. 

.PP
SSH_AUTH_PARTIAL Partial authentication, more authentication means are needed\&. 

.PP
SSH_AUTH_DENIED Authentication failed\&. 
.RE
.PP

.SS "typedef void(* ssh_channel_auth_agent_req_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"

.PP
SSH auth-agent-request from the client\&. This request is sent by a client when agent forwarding is available\&. Server is free to ignore this callback, no answer is expected\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session 
.br
\fIchannel\fP the channel 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef void(* ssh_channel_close_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"

.PP
SSH channel close callback\&. Called when a channel is closed by remote peer\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIchannel\fP the actual channel 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef int(* ssh_channel_data_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *data, uint32_t len, int is_stderr, void *userdata)"

.PP
SSH channel data callback\&. Called when data is available on a channel\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIchannel\fP the actual channel 
.br
\fIdata\fP the data that has been read on the channel 
.br
\fIlen\fP the length of the data 
.br
\fIis_stderr\fP is 0 for stdout or 1 for stderr 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
number of bytes processed by the callee\&. The remaining bytes will be sent in the next callback message, when more data is available\&. 
.RE
.PP

.SS "typedef int(* ssh_channel_env_request_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *env_name, const char *env_value, void *userdata)"

.PP
SSH channel environment request from a client\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session 
.br
\fIchannel\fP the channel 
.br
\fIenv_name\fP name of the environment value to be set 
.br
\fIenv_value\fP value of the environment value to be set 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if the env request is accepted 

.PP
1 if the request is denied 
.RE
.PP
\fBWarning\fP
.RS 4
some environment variables can be dangerous if changed (e\&.g\&. LD_PRELOAD) and should not be fulfilled\&. 
.RE
.PP

.SS "typedef void(* ssh_channel_eof_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"

.PP
SSH channel eof callback\&. Called when a channel receives EOF\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIchannel\fP the actual channel 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef int(* ssh_channel_exec_request_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *command, void *userdata)"

.PP
SSH channel Exec request from a client\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session 
.br
\fIchannel\fP the channel 
.br
\fIcommand\fP the shell command to be executed 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if the exec request is accepted 

.PP
1 if the request is denied 
.RE
.PP

.SS "typedef void(* ssh_channel_exit_signal_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *signal, int core, const char *errmsg, const char *lang, void *userdata)"

.PP
SSH channel exit signal callback\&. Called when a channel has received an exit signal\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIchannel\fP the actual channel 
.br
\fIsignal\fP the signal name (without the SIG prefix) 
.br
\fIcore\fP a boolean telling whether a core has been dumped or not 
.br
\fIerrmsg\fP the description of the exception 
.br
\fIlang\fP the language of the description (format: RFC 3066) 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef void(* ssh_channel_exit_status_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, int exit_status, void *userdata)"

.PP
SSH channel exit status callback\&. Called when a channel has received an exit status\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIchannel\fP the actual channel 
.br
\fIexit_status\fP Exit status of the ran command 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef \fBssh_channel\fP(* ssh_channel_open_request_auth_agent_callback) (\fBssh_session\fP session, void *userdata)"

.PP
Handles an SSH new channel open "auth-agent" request\&. This happens when the server sends back an "auth-agent" connection attempt\&. This is a client-side API\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP current session handler 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
a valid ssh_channel handle if the request is to be allowed 

.PP
NULL if the request should not be allowed 
.RE
.PP
\fBWarning\fP
.RS 4
The channel pointer returned by this callback must be closed by the application\&. 
.RE
.PP

.SS "typedef \fBssh_channel\fP(* ssh_channel_open_request_direct_tcpip_callback) (\fBssh_session\fP session, const char *destination_address, int destination_port, const char *originator_address, int originator_port, void *userdata)"

.PP
Handles an SSH new channel open "direct-tcpip" request\&. This happens when the client forwards an incoming TCP connection on a port it wants to forward to the destination\&. This is a server-side API\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP current session handler 
.br
\fIdestination_address\fP the address that the TCP connection connected to 
.br
\fIdestination_port\fP the port that the TCP connection connected to 
.br
\fIoriginator_address\fP the originator IP address 
.br
\fIoriginator_port\fP the originator port 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
a valid ssh_channel handle if the request is to be allowed 

.PP
NULL if the request should not be allowed 
.RE
.PP
\fBWarning\fP
.RS 4
The channel pointer returned by this callback must be closed by the application\&. 
.RE
.PP

.SS "typedef \fBssh_channel\fP(* ssh_channel_open_request_forwarded_tcpip_callback) (\fBssh_session\fP session, const char *destination_address, int destination_port, const char *originator_address, int originator_port, void *userdata)"

.PP
Handles an SSH new channel open "forwarded-tcpip" request\&. This happens when the server forwards an incoming TCP connection on a port it was previously requested to listen on\&. This is a client-side API\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP current session handler 
.br
\fIdestination_address\fP the address that the TCP connection connected to 
.br
\fIdestination_port\fP the port that the TCP connection connected to 
.br
\fIoriginator_address\fP the originator IP address 
.br
\fIoriginator_port\fP the originator port 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
a valid ssh_channel handle if the request is to be allowed 

.PP
NULL if the request should not be allowed 
.RE
.PP
\fBWarning\fP
.RS 4
The channel pointer returned by this callback must be closed by the application\&. 
.RE
.PP

.SS "typedef \fBssh_channel\fP(* ssh_channel_open_request_session_callback) (\fBssh_session\fP session, void *userdata)"

.PP
Handles an SSH new channel open session request\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP current session handler 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
a valid ssh_channel handle if the request is to be allowed 

.PP
NULL if the request should not be allowed 
.RE
.PP
\fBWarning\fP
.RS 4
The channel pointer returned by this callback must be closed by the application\&. 
.RE
.PP

.SS "typedef \fBssh_channel\fP(* ssh_channel_open_request_x11_callback) (\fBssh_session\fP session, const char *originator_address, int originator_port, void *userdata)"

.PP
Handles an SSH new channel open X11 request\&. This happens when the server sends back an X11 connection attempt\&. This is a client-side API\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP current session handler 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.br
\fIoriginator_address\fP IP address of the machine who sent the request 
.br
\fIoriginator_port\fP port number of the machine who sent the request 
.RE
.PP
\fBReturns\fP
.RS 4
a valid ssh_channel handle if the request is to be allowed 

.PP
NULL if the request should not be allowed 
.RE
.PP
\fBWarning\fP
.RS 4
The channel pointer returned by this callback must be closed by the application\&. 
.RE
.PP

.SS "typedef void(* ssh_channel_open_resp_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, bool is_success, void *userdata)"

.PP
SSH channel open callback\&. Called when a channel open succeeds or fails\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIchannel\fP the actual channel 
.br
\fIis_success\fP is 1 when the open succeeds, and 0 otherwise\&. 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef int(* ssh_channel_pty_request_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *term, int width, int height, int pxwidth, int pwheight, void *userdata)"

.PP
SSH channel PTY request from a client\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session 
.br
\fIchannel\fP the channel 
.br
\fIterm\fP The type of terminal emulation 
.br
\fIwidth\fP width of the terminal, in characters 
.br
\fIheight\fP height of the terminal, in characters 
.br
\fIpxwidth\fP width of the terminal, in pixels 
.br
\fIpwheight\fP height of the terminal, in pixels 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if the pty request is accepted 

.PP
-1 if the request is denied 
.RE
.PP

.SS "typedef int(* ssh_channel_pty_window_change_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, int width, int height, int pxwidth, int pwheight, void *userdata)"

.PP
SSH channel PTY windows change (terminal size) from a client\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session 
.br
\fIchannel\fP the channel 
.br
\fIwidth\fP width of the terminal, in characters 
.br
\fIheight\fP height of the terminal, in characters 
.br
\fIpxwidth\fP width of the terminal, in pixels 
.br
\fIpwheight\fP height of the terminal, in pixels 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if the pty request is accepted 

.PP
-1 if the request is denied 
.RE
.PP

.SS "typedef void(* ssh_channel_request_resp_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"

.PP
SSH channel request response callback\&. Called when a response to the pending request is received\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIchannel\fP the actual channel 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef int(* ssh_channel_shell_request_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, void *userdata)"

.PP
SSH channel Shell request from a client\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session 
.br
\fIchannel\fP the channel 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if the shell request is accepted 

.PP
1 if the request is denied 
.RE
.PP

.SS "typedef void(* ssh_channel_signal_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *signal, void *userdata)"

.PP
SSH channel signal callback\&. Called when a channel has received a signal\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIchannel\fP the actual channel 
.br
\fIsignal\fP the signal name (without the SIG prefix) 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef int(* ssh_channel_subsystem_request_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, const char *subsystem, void *userdata)"

.PP
SSH channel subsystem request from a client\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session 
.br
\fIchannel\fP the channel 
.br
\fIsubsystem\fP the subsystem required 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if the subsystem request is accepted 

.PP
1 if the request is denied 
.RE
.PP

.SS "typedef int(* ssh_channel_write_wontblock_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, uint32_t bytes, void *userdata)"

.PP
SSH channel write will not block (flow control)\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session
.br
\fIchannel\fP the channel
.br
\fIbytes\fP size of the remote window in bytes\&. Writing as much data will not block\&.
.br
\fIuserdata\fP Userdata to be passed to the callback function\&.
.RE
.PP
\fBReturns\fP
.RS 4
0 default return value (other return codes may be added in future)\&. 
.RE
.PP

.SS "typedef void(* ssh_channel_x11_req_callback) (\fBssh_session\fP session, \fBssh_channel\fP channel, int single_connection, const char *auth_protocol, const char *auth_cookie, uint32_t screen_number, void *userdata)"

.PP
SSH X11 request from the client\&. This request is sent by a client when X11 forwarding is requested(and available)\&. Server is free to ignore this callback, no answer is expected\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the session 
.br
\fIchannel\fP the channel 
.br
\fIsingle_connection\fP If true, only one channel should be forwarded 
.br
\fIauth_protocol\fP The X11 authentication method to be used 
.br
\fIauth_cookie\fP Authentication cookie encoded hexadecimal 
.br
\fIscreen_number\fP Screen number 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef void(* ssh_connect_status_callback) (void *userdata, float status)"

.PP
SSH connect status callback\&. These are functions that report the status of the connection i,e\&. a function indicating the completed percentage of the connection steps\&. 
.PP
\fBParameters\fP
.RS 4
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.br
\fIstatus\fP Percentage of connection status, going from 0\&.0 to 1\&.0 once connection is done\&. 
.RE
.PP

.SS "typedef void(* ssh_global_request_callback) (\fBssh_session\fP session, \fBssh_message\fP message, void *userdata)"

.PP
SSH global request callback\&. All global request will go through this callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fImessage\fP the actual message 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef void(* ssh_log_callback) (\fBssh_session\fP session, int priority, const char *message, void *userdata)"

.PP
SSH log callback\&. All logging messages will go through this callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIpriority\fP Priority of the log, the smaller being the more important 
.br
\fImessage\fP the actual message 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef void(* ssh_logging_callback) (int priority, const char *function, const char *buffer, void *userdata)"

.PP
SSH log callback\&. All logging messages will go through this callback\&.

.PP
\fBParameters\fP
.RS 4
\fIpriority\fP Priority of the log, the smaller being the more important\&.
.br
\fIfunction\fP The function name calling the logging functions\&.
.br
\fIbuffer\fP The actual message
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SS "typedef int(* ssh_packet_callback) (\fBssh_session\fP session, uint8_t type, \fBssh_buffer\fP packet, void *user)"

.PP
Prototype for a packet callback, to be called when a new packet arrives\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP The current session of the packet 
.br
\fItype\fP packet type (see \fBssh2\&.h\fP) 
.br
\fIpacket\fP buffer containing the packet, excluding size, type and padding fields 
.br
\fIuser\fP user argument to the callback and are called each time a packet shows up 
.RE
.PP
\fBReturns\fP
.RS 4
SSH_PACKET_USED Packet was parsed and used 

.PP
SSH_PACKET_NOT_USED Packet was not used or understood, processing must continue 
.RE
.PP

.SS "typedef int(* ssh_service_request_callback) (\fBssh_session\fP session, const char *service, void *userdata)"

.PP
Handles an SSH service request\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP current session handler 
.br
\fIservice\fP name of the service (e\&.g\&. "ssh-userauth") requested 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if the request is to be allowed 

.PP
-1 if the request should not be allowed 
.RE
.PP

.SS "typedef void(* ssh_status_callback) (\fBssh_session\fP session, float status, void *userdata)"

.PP
SSH Connection status callback\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP Current session handler 
.br
\fIstatus\fP Percentage of connection status, going from 0\&.0 to 1\&.0 once connection is done\&. 
.br
\fIuserdata\fP Userdata to be passed to the callback function\&. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "LIBSSH_API int ssh_add_channel_callbacks (\fBssh_channel\fP channel, \fBssh_channel_callbacks\fP cb)"

.PP
Add channel callback functions\&. This function will add channel callback functions to the channel callback list\&. Callbacks missing from a callback structure will be probed in the next on the list\&.

.PP
\fBParameters\fP
.RS 4
\fIchannel\fP The channel to set the callback structure\&.
.br
\fIcb\fP The callback structure itself\&.
.RE
.PP
\fBReturns\fP
.RS 4
SSH_OK on success, SSH_ERROR on error\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBssh_set_channel_callbacks\fP 
.RE
.PP

.SS "LIBSSH_API int ssh_remove_channel_callbacks (\fBssh_channel\fP channel, \fBssh_channel_callbacks\fP cb)"

.PP
Remove a channel callback\&. The channel has been added with ssh_add_channel_callbacks or ssh_set_channel_callbacks in this case\&.

.PP
\fBParameters\fP
.RS 4
\fIchannel\fP The channel to remove the callback structure from\&.
.br
\fIcb\fP The callback structure to remove
.RE
.PP
\fBReturns\fP
.RS 4
SSH_OK on success, SSH_ERROR on error\&. 
.RE
.PP

.SS "LIBSSH_API int ssh_set_callbacks (\fBssh_session\fP session, \fBssh_callbacks\fP cb)"

.PP
Set the session callback functions\&. This functions sets the callback structure to use your own callback functions for auth, logging and status\&.

.PP
Note, that the callback structure is not copied into the session so it needs to be valid for the whole session lifetime\&.

.PP
.PP
.nf
struct ssh_callbacks_struct cb = {
  \&.userdata = data,
  \&.auth_function = my_auth_function
};
ssh_callbacks_init(&cb);
ssh_set_callbacks(session, &cb);
.fi
.PP

.PP
\fBParameters\fP
.RS 4
\fIsession\fP The session to set the callback structure\&.
.br
\fIcb\fP The callback structure itself\&.
.RE
.PP
\fBReturns\fP
.RS 4
SSH_OK on success, SSH_ERROR on error\&. 
.RE
.PP

.SS "LIBSSH_API int ssh_set_channel_callbacks (\fBssh_channel\fP channel, \fBssh_channel_callbacks\fP cb)"

.PP
Set the channel callback functions\&. This functions sets the callback structure to use your own callback functions for channel data and exceptions\&.

.PP
Note, that the structure is not copied to the channel structure so it needs to be valid as for the whole life of the channel or until it is removed with \fBssh_remove_channel_callbacks()\fP\&.

.PP
.PP
.nf
struct ssh_channel_callbacks_struct cb = {
  \&.userdata = data,
  \&.channel_data_function = my_channel_data_function
};
ssh_callbacks_init(&cb);
ssh_set_channel_callbacks(channel, &cb);
.fi
.PP

.PP
\fBParameters\fP
.RS 4
\fIchannel\fP The channel to set the callback structure\&.
.br
\fIcb\fP The callback structure itself\&.
.RE
.PP
\fBReturns\fP
.RS 4
SSH_OK on success, SSH_ERROR on error\&. 
.RE
.PP
\fBWarning\fP
.RS 4
this function will not replace existing callbacks but set the new one atop of them\&. 
.RE
.PP

.SS "LIBSSH_API int ssh_set_server_callbacks (\fBssh_session\fP session, \fBssh_server_callbacks\fP cb)"

.PP
Set the session server callback functions\&. This functions sets the callback structure to use your own callback functions for user authentication, new channels and requests\&.

.PP
Note, that the structure is not copied to the session structure so it needs to be valid for the whole session lifetime\&.

.PP
.PP
.nf
struct ssh_server_callbacks_struct cb = {
  \&.userdata = data,
  \&.auth_password_function = my_auth_function
};
ssh_callbacks_init(&cb);
ssh_set_server_callbacks(session, &cb);
.fi
.PP

.PP
\fBParameters\fP
.RS 4
\fIsession\fP The session to set the callback structure\&.
.br
\fIcb\fP The callback structure itself\&.
.RE
.PP
\fBReturns\fP
.RS 4
SSH_OK on success, SSH_ERROR on error\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
